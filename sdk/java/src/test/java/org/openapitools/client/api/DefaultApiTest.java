/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppendBlockChildrenRequest;
import org.openapitools.client.model.AppendBlockChildrenResponse;
import org.openapitools.client.model.Block;
import org.openapitools.client.model.CreateDatabaseRequest;
import org.openapitools.client.model.CreatePageRequest;
import org.openapitools.client.model.CreatePageResponse;
import org.openapitools.client.model.Database;
import org.openapitools.client.model.DeleteBlockResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetBlockChildrenResponse;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.QueryDatabaseRequest;
import org.openapitools.client.model.QueryDatabaseResponse;
import java.util.UUID;
import org.openapitools.client.model.UpdateBlockRequest;
import org.openapitools.client.model.UpdateDatabaseRequest;
import org.openapitools.client.model.UpdatePageRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * 追加子块
     *
     * 向指定块追加一个或多个子块
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendBlockChildrenTest() throws ApiException {
        UUID blockId = null;
        AppendBlockChildrenRequest appendBlockChildrenRequest = null;
        AppendBlockChildrenResponse response = api.appendBlockChildren(blockId, appendBlockChildrenRequest);
        // TODO: test validations
    }

    /**
     * 创建数据库
     *
     * 在现有页面下创建一个新的数据库
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDatabaseTest() throws ApiException {
        CreateDatabaseRequest createDatabaseRequest = null;
        Database response = api.createDatabase(createDatabaseRequest);
        // TODO: test validations
    }

    /**
     * 创建页面
     *
     * 在页面或数据库中创建新页面
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPageTest() throws ApiException {
        CreatePageRequest createPageRequest = null;
        CreatePageResponse response = api.createPage(createPageRequest);
        // TODO: test validations
    }

    /**
     * 删除块
     *
     * 删除指定块及其所有子块
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBlockTest() throws ApiException {
        UUID blockId = null;
        DeleteBlockResponse response = api.deleteBlock(blockId);
        // TODO: test validations
    }

    /**
     * 获取块
     *
     * 根据ID获取块对象
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockTest() throws ApiException {
        UUID blockId = null;
        Block response = api.getBlock(blockId);
        // TODO: test validations
    }

    /**
     * 获取子块
     *
     * 获取指定块的子块列表
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockChildrenTest() throws ApiException {
        UUID blockId = null;
        String startCursor = null;
        Integer pageSize = null;
        GetBlockChildrenResponse response = api.getBlockChildren(blockId, startCursor, pageSize);
        // TODO: test validations
    }

    /**
     * 获取数据库
     *
     * 根据ID获取数据库对象
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatabaseTest() throws ApiException {
        UUID databaseId = null;
        Database response = api.getDatabase(databaseId);
        // TODO: test validations
    }

    /**
     * 获取页面
     *
     * 根据ID获取页面对象
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPageTest() throws ApiException {
        UUID pageId = null;
        Page response = api.getPage(pageId);
        // TODO: test validations
    }

    /**
     * 查询数据库
     *
     * 获取数据库中的页面列表，支持分页
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryDatabaseTest() throws ApiException {
        UUID databaseId = null;
        QueryDatabaseRequest queryDatabaseRequest = null;
        QueryDatabaseResponse response = api.queryDatabase(databaseId, queryDatabaseRequest);
        // TODO: test validations
    }

    /**
     * 更新块
     *
     * 更新指定块的内容或属性
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlockTest() throws ApiException {
        UUID blockId = null;
        UpdateBlockRequest updateBlockRequest = null;
        Block response = api.updateBlock(blockId, updateBlockRequest);
        // TODO: test validations
    }

    /**
     * 更新数据库
     *
     * 更新数据库的属性
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDatabaseTest() throws ApiException {
        UUID databaseId = null;
        UpdateDatabaseRequest updateDatabaseRequest = null;
        Database response = api.updateDatabase(databaseId, updateDatabaseRequest);
        // TODO: test validations
    }

    /**
     * 更新页面属性
     *
     * 更新页面的属性
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePageTest() throws ApiException {
        UUID pageId = null;
        UpdatePageRequest updatePageRequest = null;
        Page response = api.updatePage(pageId, updatePageRequest);
        // TODO: test validations
    }

}
