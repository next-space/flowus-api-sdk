/*
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppendBlockChildrenRequest;
import org.openapitools.client.model.AppendBlockChildrenResponse;
import org.openapitools.client.model.Block;
import org.openapitools.client.model.CreateDatabaseRequest;
import org.openapitools.client.model.CreatePageRequest;
import org.openapitools.client.model.CreatePageResponse;
import org.openapitools.client.model.Database;
import org.openapitools.client.model.DeleteBlockResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetBlockChildrenResponse;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.QueryDatabaseRequest;
import org.openapitools.client.model.QueryDatabaseResponse;
import org.openapitools.client.model.SearchRequest;
import org.openapitools.client.model.SearchResult;
import java.util.UUID;
import org.openapitools.client.model.UpdateBlockRequest;
import org.openapitools.client.model.UpdateDatabaseRequest;
import org.openapitools.client.model.UpdatePageRequest;
import org.openapitools.client.model.UserMe;
import org.openapitools.client.model.V1SearchRequest;
import org.openapitools.client.model.V1SearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appendBlockChildren
     * @param blockId 父块ID (required)
     * @param appendBlockChildrenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 子块创建成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendBlockChildrenCall(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull AppendBlockChildrenRequest appendBlockChildrenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appendBlockChildrenRequest;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}/children"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendBlockChildrenValidateBeforeCall(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull AppendBlockChildrenRequest appendBlockChildrenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling appendBlockChildren(Async)");
        }

        // verify the required parameter 'appendBlockChildrenRequest' is set
        if (appendBlockChildrenRequest == null) {
            throw new ApiException("Missing the required parameter 'appendBlockChildrenRequest' when calling appendBlockChildren(Async)");
        }

        return appendBlockChildrenCall(blockId, appendBlockChildrenRequest, _callback);

    }

    /**
     * 追加子块
     * 向指定块追加一个或多个子块
     * @param blockId 父块ID (required)
     * @param appendBlockChildrenRequest  (required)
     * @return AppendBlockChildrenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 子块创建成功 </td><td>  -  </td></tr>
     </table>
     */
    public AppendBlockChildrenResponse appendBlockChildren(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull AppendBlockChildrenRequest appendBlockChildrenRequest) throws ApiException {
        ApiResponse<AppendBlockChildrenResponse> localVarResp = appendBlockChildrenWithHttpInfo(blockId, appendBlockChildrenRequest);
        return localVarResp.getData();
    }

    /**
     * 追加子块
     * 向指定块追加一个或多个子块
     * @param blockId 父块ID (required)
     * @param appendBlockChildrenRequest  (required)
     * @return ApiResponse&lt;AppendBlockChildrenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 子块创建成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendBlockChildrenResponse> appendBlockChildrenWithHttpInfo(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull AppendBlockChildrenRequest appendBlockChildrenRequest) throws ApiException {
        okhttp3.Call localVarCall = appendBlockChildrenValidateBeforeCall(blockId, appendBlockChildrenRequest, null);
        Type localVarReturnType = new TypeToken<AppendBlockChildrenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 追加子块 (asynchronously)
     * 向指定块追加一个或多个子块
     * @param blockId 父块ID (required)
     * @param appendBlockChildrenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 子块创建成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendBlockChildrenAsync(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull AppendBlockChildrenRequest appendBlockChildrenRequest, final ApiCallback<AppendBlockChildrenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendBlockChildrenValidateBeforeCall(blockId, appendBlockChildrenRequest, _callback);
        Type localVarReturnType = new TypeToken<AppendBlockChildrenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDatabase
     * @param createDatabaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatabaseCall(@javax.annotation.Nonnull CreateDatabaseRequest createDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDatabaseRequest;

        // create path and map variables
        String localVarPath = "/v1/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatabaseValidateBeforeCall(@javax.annotation.Nonnull CreateDatabaseRequest createDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDatabaseRequest' is set
        if (createDatabaseRequest == null) {
            throw new ApiException("Missing the required parameter 'createDatabaseRequest' when calling createDatabase(Async)");
        }

        return createDatabaseCall(createDatabaseRequest, _callback);

    }

    /**
     * 创建数据库
     * 在现有页面下创建一个新的数据库
     * @param createDatabaseRequest  (required)
     * @return Database
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public Database createDatabase(@javax.annotation.Nonnull CreateDatabaseRequest createDatabaseRequest) throws ApiException {
        ApiResponse<Database> localVarResp = createDatabaseWithHttpInfo(createDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * 创建数据库
     * 在现有页面下创建一个新的数据库
     * @param createDatabaseRequest  (required)
     * @return ApiResponse&lt;Database&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Database> createDatabaseWithHttpInfo(@javax.annotation.Nonnull CreateDatabaseRequest createDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = createDatabaseValidateBeforeCall(createDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<Database>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建数据库 (asynchronously)
     * 在现有页面下创建一个新的数据库
     * @param createDatabaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatabaseAsync(@javax.annotation.Nonnull CreateDatabaseRequest createDatabaseRequest, final ApiCallback<Database> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatabaseValidateBeforeCall(createDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Database>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPage
     * @param createPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPageCall(@javax.annotation.Nonnull CreatePageRequest createPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPageRequest;

        // create path and map variables
        String localVarPath = "/v1/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPageValidateBeforeCall(@javax.annotation.Nonnull CreatePageRequest createPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPageRequest' is set
        if (createPageRequest == null) {
            throw new ApiException("Missing the required parameter 'createPageRequest' when calling createPage(Async)");
        }

        return createPageCall(createPageRequest, _callback);

    }

    /**
     * 创建页面
     * 在页面或数据库中创建新页面
     * @param createPageRequest  (required)
     * @return CreatePageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public CreatePageResponse createPage(@javax.annotation.Nonnull CreatePageRequest createPageRequest) throws ApiException {
        ApiResponse<CreatePageResponse> localVarResp = createPageWithHttpInfo(createPageRequest);
        return localVarResp.getData();
    }

    /**
     * 创建页面
     * 在页面或数据库中创建新页面
     * @param createPageRequest  (required)
     * @return ApiResponse&lt;CreatePageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePageResponse> createPageWithHttpInfo(@javax.annotation.Nonnull CreatePageRequest createPageRequest) throws ApiException {
        okhttp3.Call localVarCall = createPageValidateBeforeCall(createPageRequest, null);
        Type localVarReturnType = new TypeToken<CreatePageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建页面 (asynchronously)
     * 在页面或数据库中创建新页面
     * @param createPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPageAsync(@javax.annotation.Nonnull CreatePageRequest createPageRequest, final ApiCallback<CreatePageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPageValidateBeforeCall(createPageRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBlock
     * @param blockId 块ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块删除成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBlockCall(@javax.annotation.Nonnull UUID blockId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBlockValidateBeforeCall(@javax.annotation.Nonnull UUID blockId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling deleteBlock(Async)");
        }

        return deleteBlockCall(blockId, _callback);

    }

    /**
     * 删除块
     * 删除指定块及其所有子块
     * @param blockId 块ID (required)
     * @return DeleteBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块删除成功 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBlockResponse deleteBlock(@javax.annotation.Nonnull UUID blockId) throws ApiException {
        ApiResponse<DeleteBlockResponse> localVarResp = deleteBlockWithHttpInfo(blockId);
        return localVarResp.getData();
    }

    /**
     * 删除块
     * 删除指定块及其所有子块
     * @param blockId 块ID (required)
     * @return ApiResponse&lt;DeleteBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块删除成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteBlockResponse> deleteBlockWithHttpInfo(@javax.annotation.Nonnull UUID blockId) throws ApiException {
        okhttp3.Call localVarCall = deleteBlockValidateBeforeCall(blockId, null);
        Type localVarReturnType = new TypeToken<DeleteBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除块 (asynchronously)
     * 删除指定块及其所有子块
     * @param blockId 块ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块删除成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBlockAsync(@javax.annotation.Nonnull UUID blockId, final ApiCallback<DeleteBlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBlockValidateBeforeCall(blockId, _callback);
        Type localVarReturnType = new TypeToken<DeleteBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlock
     * @param blockId 块ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取块 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockCall(@javax.annotation.Nonnull UUID blockId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockValidateBeforeCall(@javax.annotation.Nonnull UUID blockId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling getBlock(Async)");
        }

        return getBlockCall(blockId, _callback);

    }

    /**
     * 获取块
     * 根据ID获取块对象
     * @param blockId 块ID (required)
     * @return Block
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取块 </td><td>  -  </td></tr>
     </table>
     */
    public Block getBlock(@javax.annotation.Nonnull UUID blockId) throws ApiException {
        ApiResponse<Block> localVarResp = getBlockWithHttpInfo(blockId);
        return localVarResp.getData();
    }

    /**
     * 获取块
     * 根据ID获取块对象
     * @param blockId 块ID (required)
     * @return ApiResponse&lt;Block&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取块 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Block> getBlockWithHttpInfo(@javax.annotation.Nonnull UUID blockId) throws ApiException {
        okhttp3.Call localVarCall = getBlockValidateBeforeCall(blockId, null);
        Type localVarReturnType = new TypeToken<Block>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取块 (asynchronously)
     * 根据ID获取块对象
     * @param blockId 块ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取块 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockAsync(@javax.annotation.Nonnull UUID blockId, final ApiCallback<Block> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockValidateBeforeCall(blockId, _callback);
        Type localVarReturnType = new TypeToken<Block>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlockChildren
     * @param blockId 父块ID (required)
     * @param startCursor 分页游标，使用子块的ID作为游标值 (optional)
     * @param pageSize 每页记录数 (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取子块列表 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockChildrenCall(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nullable String startCursor, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}/children"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_cursor", startCursor));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockChildrenValidateBeforeCall(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nullable String startCursor, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling getBlockChildren(Async)");
        }

        return getBlockChildrenCall(blockId, startCursor, pageSize, _callback);

    }

    /**
     * 获取子块
     * 获取指定块的子块列表
     * @param blockId 父块ID (required)
     * @param startCursor 分页游标，使用子块的ID作为游标值 (optional)
     * @param pageSize 每页记录数 (optional, default to 50)
     * @return GetBlockChildrenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取子块列表 </td><td>  -  </td></tr>
     </table>
     */
    public GetBlockChildrenResponse getBlockChildren(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nullable String startCursor, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        ApiResponse<GetBlockChildrenResponse> localVarResp = getBlockChildrenWithHttpInfo(blockId, startCursor, pageSize);
        return localVarResp.getData();
    }

    /**
     * 获取子块
     * 获取指定块的子块列表
     * @param blockId 父块ID (required)
     * @param startCursor 分页游标，使用子块的ID作为游标值 (optional)
     * @param pageSize 每页记录数 (optional, default to 50)
     * @return ApiResponse&lt;GetBlockChildrenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取子块列表 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlockChildrenResponse> getBlockChildrenWithHttpInfo(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nullable String startCursor, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getBlockChildrenValidateBeforeCall(blockId, startCursor, pageSize, null);
        Type localVarReturnType = new TypeToken<GetBlockChildrenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取子块 (asynchronously)
     * 获取指定块的子块列表
     * @param blockId 父块ID (required)
     * @param startCursor 分页游标，使用子块的ID作为游标值 (optional)
     * @param pageSize 每页记录数 (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取子块列表 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockChildrenAsync(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nullable String startCursor, @javax.annotation.Nullable Integer pageSize, final ApiCallback<GetBlockChildrenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockChildrenValidateBeforeCall(blockId, startCursor, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GetBlockChildrenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatabase
     * @param databaseId 数据库ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取数据库 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 数据库不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatabaseCall(@javax.annotation.Nonnull UUID databaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/databases/{database_id}"
            .replace("{" + "database_id" + "}", localVarApiClient.escapeString(databaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatabaseValidateBeforeCall(@javax.annotation.Nonnull UUID databaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling getDatabase(Async)");
        }

        return getDatabaseCall(databaseId, _callback);

    }

    /**
     * 获取数据库
     * 根据ID获取数据库对象
     * @param databaseId 数据库ID (required)
     * @return Database
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取数据库 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 数据库不存在 </td><td>  -  </td></tr>
     </table>
     */
    public Database getDatabase(@javax.annotation.Nonnull UUID databaseId) throws ApiException {
        ApiResponse<Database> localVarResp = getDatabaseWithHttpInfo(databaseId);
        return localVarResp.getData();
    }

    /**
     * 获取数据库
     * 根据ID获取数据库对象
     * @param databaseId 数据库ID (required)
     * @return ApiResponse&lt;Database&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取数据库 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 数据库不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Database> getDatabaseWithHttpInfo(@javax.annotation.Nonnull UUID databaseId) throws ApiException {
        okhttp3.Call localVarCall = getDatabaseValidateBeforeCall(databaseId, null);
        Type localVarReturnType = new TypeToken<Database>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取数据库 (asynchronously)
     * 根据ID获取数据库对象
     * @param databaseId 数据库ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取数据库 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 数据库不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatabaseAsync(@javax.annotation.Nonnull UUID databaseId, final ApiCallback<Database> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatabaseValidateBeforeCall(databaseId, _callback);
        Type localVarReturnType = new TypeToken<Database>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMe
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取用户信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 机器人创建者信息不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMeCall(_callback);

    }

    /**
     * 获取机器人创建者信息
     * 获取当前机器人的创建者用户信息
     * @return UserMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取用户信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 机器人创建者信息不存在 </td><td>  -  </td></tr>
     </table>
     */
    public UserMe getMe() throws ApiException {
        ApiResponse<UserMe> localVarResp = getMeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 获取机器人创建者信息
     * 获取当前机器人的创建者用户信息
     * @return ApiResponse&lt;UserMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取用户信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 机器人创建者信息不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserMe> getMeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserMe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取机器人创建者信息 (asynchronously)
     * 获取当前机器人的创建者用户信息
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取用户信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 机器人创建者信息不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeAsync(final ApiCallback<UserMe> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserMe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPage
     * @param pageId 页面ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取页面 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 页面不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageCall(@javax.annotation.Nonnull UUID pageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pages/{page_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPageValidateBeforeCall(@javax.annotation.Nonnull UUID pageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPage(Async)");
        }

        return getPageCall(pageId, _callback);

    }

    /**
     * 获取页面
     * 根据ID获取页面对象
     * @param pageId 页面ID (required)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取页面 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 页面不存在 </td><td>  -  </td></tr>
     </table>
     */
    public Page getPage(@javax.annotation.Nonnull UUID pageId) throws ApiException {
        ApiResponse<Page> localVarResp = getPageWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * 获取页面
     * 根据ID获取页面对象
     * @param pageId 页面ID (required)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取页面 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 页面不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> getPageWithHttpInfo(@javax.annotation.Nonnull UUID pageId) throws ApiException {
        okhttp3.Call localVarCall = getPageValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取页面 (asynchronously)
     * 根据ID获取页面对象
     * @param pageId 页面ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取页面 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 页面不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageAsync(@javax.annotation.Nonnull UUID pageId, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPageValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDatabase
     * @param databaseId 数据库ID (required)
     * @param queryDatabaseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDatabaseCall(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nullable QueryDatabaseRequest queryDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryDatabaseRequest;

        // create path and map variables
        String localVarPath = "/v1/databases/{database_id}/query"
            .replace("{" + "database_id" + "}", localVarApiClient.escapeString(databaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDatabaseValidateBeforeCall(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nullable QueryDatabaseRequest queryDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling queryDatabase(Async)");
        }

        return queryDatabaseCall(databaseId, queryDatabaseRequest, _callback);

    }

    /**
     * 查询数据库
     * 获取数据库中的页面列表，支持分页
     * @param databaseId 数据库ID (required)
     * @param queryDatabaseRequest  (optional)
     * @return QueryDatabaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public QueryDatabaseResponse queryDatabase(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nullable QueryDatabaseRequest queryDatabaseRequest) throws ApiException {
        ApiResponse<QueryDatabaseResponse> localVarResp = queryDatabaseWithHttpInfo(databaseId, queryDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * 查询数据库
     * 获取数据库中的页面列表，支持分页
     * @param databaseId 数据库ID (required)
     * @param queryDatabaseRequest  (optional)
     * @return ApiResponse&lt;QueryDatabaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryDatabaseResponse> queryDatabaseWithHttpInfo(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nullable QueryDatabaseRequest queryDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = queryDatabaseValidateBeforeCall(databaseId, queryDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<QueryDatabaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询数据库 (asynchronously)
     * 获取数据库中的页面列表，支持分页
     * @param databaseId 数据库ID (required)
     * @param queryDatabaseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDatabaseAsync(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nullable QueryDatabaseRequest queryDatabaseRequest, final ApiCallback<QueryDatabaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDatabaseValidateBeforeCall(databaseId, queryDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<QueryDatabaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPages
     * @param searchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPagesCall(@javax.annotation.Nonnull SearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchRequest;

        // create path and map variables
        String localVarPath = "/v1/pages/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPagesValidateBeforeCall(@javax.annotation.Nonnull SearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchRequest' is set
        if (searchRequest == null) {
            throw new ApiException("Missing the required parameter 'searchRequest' when calling searchPages(Async)");
        }

        return searchPagesCall(searchRequest, _callback);

    }

    /**
     * 搜索页面
     * 通过向量搜索在空间中查找相关页面和内容
     * @param searchRequest  (required)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public SearchResult searchPages(@javax.annotation.Nonnull SearchRequest searchRequest) throws ApiException {
        ApiResponse<SearchResult> localVarResp = searchPagesWithHttpInfo(searchRequest);
        return localVarResp.getData();
    }

    /**
     * 搜索页面
     * 通过向量搜索在空间中查找相关页面和内容
     * @param searchRequest  (required)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResult> searchPagesWithHttpInfo(@javax.annotation.Nonnull SearchRequest searchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchPagesValidateBeforeCall(searchRequest, null);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索页面 (asynchronously)
     * 通过向量搜索在空间中查找相关页面和内容
     * @param searchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPagesAsync(@javax.annotation.Nonnull SearchRequest searchRequest, final ApiCallback<SearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPagesValidateBeforeCall(searchRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBlock
     * @param blockId 块ID (required)
     * @param updateBlockRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBlockCall(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull UpdateBlockRequest updateBlockRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBlockRequest;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBlockValidateBeforeCall(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull UpdateBlockRequest updateBlockRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling updateBlock(Async)");
        }

        // verify the required parameter 'updateBlockRequest' is set
        if (updateBlockRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBlockRequest' when calling updateBlock(Async)");
        }

        return updateBlockCall(blockId, updateBlockRequest, _callback);

    }

    /**
     * 更新块
     * 更新指定块的内容或属性
     * @param blockId 块ID (required)
     * @param updateBlockRequest  (required)
     * @return Block
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public Block updateBlock(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull UpdateBlockRequest updateBlockRequest) throws ApiException {
        ApiResponse<Block> localVarResp = updateBlockWithHttpInfo(blockId, updateBlockRequest);
        return localVarResp.getData();
    }

    /**
     * 更新块
     * 更新指定块的内容或属性
     * @param blockId 块ID (required)
     * @param updateBlockRequest  (required)
     * @return ApiResponse&lt;Block&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Block> updateBlockWithHttpInfo(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull UpdateBlockRequest updateBlockRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBlockValidateBeforeCall(blockId, updateBlockRequest, null);
        Type localVarReturnType = new TypeToken<Block>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新块 (asynchronously)
     * 更新指定块的内容或属性
     * @param blockId 块ID (required)
     * @param updateBlockRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 块更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBlockAsync(@javax.annotation.Nonnull UUID blockId, @javax.annotation.Nonnull UpdateBlockRequest updateBlockRequest, final ApiCallback<Block> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBlockValidateBeforeCall(blockId, updateBlockRequest, _callback);
        Type localVarReturnType = new TypeToken<Block>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDatabase
     * @param databaseId 数据库ID (required)
     * @param updateDatabaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatabaseCall(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nonnull UpdateDatabaseRequest updateDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDatabaseRequest;

        // create path and map variables
        String localVarPath = "/v1/databases/{database_id}"
            .replace("{" + "database_id" + "}", localVarApiClient.escapeString(databaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatabaseValidateBeforeCall(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nonnull UpdateDatabaseRequest updateDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling updateDatabase(Async)");
        }

        // verify the required parameter 'updateDatabaseRequest' is set
        if (updateDatabaseRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDatabaseRequest' when calling updateDatabase(Async)");
        }

        return updateDatabaseCall(databaseId, updateDatabaseRequest, _callback);

    }

    /**
     * 更新数据库
     * 更新数据库的属性
     * @param databaseId 数据库ID (required)
     * @param updateDatabaseRequest  (required)
     * @return Database
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public Database updateDatabase(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nonnull UpdateDatabaseRequest updateDatabaseRequest) throws ApiException {
        ApiResponse<Database> localVarResp = updateDatabaseWithHttpInfo(databaseId, updateDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * 更新数据库
     * 更新数据库的属性
     * @param databaseId 数据库ID (required)
     * @param updateDatabaseRequest  (required)
     * @return ApiResponse&lt;Database&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Database> updateDatabaseWithHttpInfo(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nonnull UpdateDatabaseRequest updateDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDatabaseValidateBeforeCall(databaseId, updateDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<Database>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新数据库 (asynchronously)
     * 更新数据库的属性
     * @param databaseId 数据库ID (required)
     * @param updateDatabaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 数据库更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatabaseAsync(@javax.annotation.Nonnull UUID databaseId, @javax.annotation.Nonnull UpdateDatabaseRequest updateDatabaseRequest, final ApiCallback<Database> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatabaseValidateBeforeCall(databaseId, updateDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Database>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePage
     * @param pageId 页面ID (required)
     * @param updatePageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePageCall(@javax.annotation.Nonnull UUID pageId, @javax.annotation.Nonnull UpdatePageRequest updatePageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePageRequest;

        // create path and map variables
        String localVarPath = "/v1/pages/{page_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePageValidateBeforeCall(@javax.annotation.Nonnull UUID pageId, @javax.annotation.Nonnull UpdatePageRequest updatePageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling updatePage(Async)");
        }

        // verify the required parameter 'updatePageRequest' is set
        if (updatePageRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePageRequest' when calling updatePage(Async)");
        }

        return updatePageCall(pageId, updatePageRequest, _callback);

    }

    /**
     * 更新页面属性
     * 更新页面的属性
     * @param pageId 页面ID (required)
     * @param updatePageRequest  (required)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public Page updatePage(@javax.annotation.Nonnull UUID pageId, @javax.annotation.Nonnull UpdatePageRequest updatePageRequest) throws ApiException {
        ApiResponse<Page> localVarResp = updatePageWithHttpInfo(pageId, updatePageRequest);
        return localVarResp.getData();
    }

    /**
     * 更新页面属性
     * 更新页面的属性
     * @param pageId 页面ID (required)
     * @param updatePageRequest  (required)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> updatePageWithHttpInfo(@javax.annotation.Nonnull UUID pageId, @javax.annotation.Nonnull UpdatePageRequest updatePageRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePageValidateBeforeCall(pageId, updatePageRequest, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新页面属性 (asynchronously)
     * 更新页面的属性
     * @param pageId 页面ID (required)
     * @param updatePageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 页面更新成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePageAsync(@javax.annotation.Nonnull UUID pageId, @javax.annotation.Nonnull UpdatePageRequest updatePageRequest, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePageValidateBeforeCall(pageId, updatePageRequest, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1Search
     * @param v1SearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超过限制 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SearchCall(@javax.annotation.Nonnull V1SearchRequest v1SearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = v1SearchRequest;

        // create path and map variables
        String localVarPath = "/v1/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SearchValidateBeforeCall(@javax.annotation.Nonnull V1SearchRequest v1SearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'v1SearchRequest' is set
        if (v1SearchRequest == null) {
            throw new ApiException("Missing the required parameter 'v1SearchRequest' when calling v1Search(Async)");
        }

        return v1SearchCall(v1SearchRequest, _callback);

    }

    /**
     * 搜索页面
     * 在机器人授权的页面范围内搜索相关内容
     * @param v1SearchRequest  (required)
     * @return V1SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超过限制 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public V1SearchResponse v1Search(@javax.annotation.Nonnull V1SearchRequest v1SearchRequest) throws ApiException {
        ApiResponse<V1SearchResponse> localVarResp = v1SearchWithHttpInfo(v1SearchRequest);
        return localVarResp.getData();
    }

    /**
     * 搜索页面
     * 在机器人授权的页面范围内搜索相关内容
     * @param v1SearchRequest  (required)
     * @return ApiResponse&lt;V1SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超过限制 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1SearchResponse> v1SearchWithHttpInfo(@javax.annotation.Nonnull V1SearchRequest v1SearchRequest) throws ApiException {
        okhttp3.Call localVarCall = v1SearchValidateBeforeCall(v1SearchRequest, null);
        Type localVarReturnType = new TypeToken<V1SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索页面 (asynchronously)
     * 在机器人授权的页面范围内搜索相关内容
     * @param v1SearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 搜索成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超过限制 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SearchAsync(@javax.annotation.Nonnull V1SearchRequest v1SearchRequest, final ApiCallback<V1SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SearchValidateBeforeCall(v1SearchRequest, _callback);
        Type localVarReturnType = new TypeToken<V1SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
