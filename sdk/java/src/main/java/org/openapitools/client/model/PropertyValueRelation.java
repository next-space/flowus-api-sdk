/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePagePropertyValueRelationRelationInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropertyValueRelation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-02T17:17:19.267825+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class PropertyValueRelation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private Object type = null;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  @javax.annotation.Nullable
  private List<CreatePagePropertyValueRelationRelationInner> relation = new ArrayList<>();

  public PropertyValueRelation() {
  }

  public PropertyValueRelation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public PropertyValueRelation type(@javax.annotation.Nullable Object type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Object getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable Object type) {
    this.type = type;
  }


  public PropertyValueRelation relation(@javax.annotation.Nullable List<CreatePagePropertyValueRelationRelationInner> relation) {
    this.relation = relation;
    return this;
  }

  public PropertyValueRelation addRelationItem(CreatePagePropertyValueRelationRelationInner relationItem) {
    if (this.relation == null) {
      this.relation = new ArrayList<>();
    }
    this.relation.add(relationItem);
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public List<CreatePagePropertyValueRelationRelationInner> getRelation() {
    return relation;
  }

  public void setRelation(@javax.annotation.Nullable List<CreatePagePropertyValueRelationRelationInner> relation) {
    this.relation = relation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyValueRelation propertyValueRelation = (PropertyValueRelation) o;
    return Objects.equals(this.id, propertyValueRelation.id) &&
        Objects.equals(this.type, propertyValueRelation.type) &&
        Objects.equals(this.relation, propertyValueRelation.relation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, relation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyValueRelation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "type", "relation"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyValueRelation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyValueRelation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyValueRelation is not found in the empty JSON string", PropertyValueRelation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyValueRelation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyValueRelation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        JsonArray jsonArrayrelation = jsonObj.getAsJsonArray("relation");
        if (jsonArrayrelation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relation` to be an array in the JSON string but got `%s`", jsonObj.get("relation").toString()));
          }

          // validate the optional field `relation` (array)
          for (int i = 0; i < jsonArrayrelation.size(); i++) {
            CreatePagePropertyValueRelationRelationInner.validateJsonElement(jsonArrayrelation.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyValueRelation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyValueRelation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyValueRelation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueRelation.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyValueRelation>() {
           @Override
           public void write(JsonWriter out, PropertyValueRelation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyValueRelation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyValueRelation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyValueRelation
   * @throws IOException if the JSON string is invalid with respect to PropertyValueRelation
   */
  public static PropertyValueRelation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyValueRelation.class);
  }

  /**
   * Convert an instance of PropertyValueRelation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

