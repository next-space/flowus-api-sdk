/*
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePagePropertyValueCheckbox;
import org.openapitools.client.model.CreatePagePropertyValueDate;
import org.openapitools.client.model.CreatePagePropertyValueDateDate;
import org.openapitools.client.model.CreatePagePropertyValueEmail;
import org.openapitools.client.model.CreatePagePropertyValueFiles;
import org.openapitools.client.model.CreatePagePropertyValueFilesFilesInner;
import org.openapitools.client.model.CreatePagePropertyValueMultiSelect;
import org.openapitools.client.model.CreatePagePropertyValueNumber;
import org.openapitools.client.model.CreatePagePropertyValuePeople;
import org.openapitools.client.model.CreatePagePropertyValuePeoplePeopleInner;
import org.openapitools.client.model.CreatePagePropertyValuePhoneNumber;
import org.openapitools.client.model.CreatePagePropertyValueRelation;
import org.openapitools.client.model.CreatePagePropertyValueRelationRelationInner;
import org.openapitools.client.model.CreatePagePropertyValueRichText;
import org.openapitools.client.model.CreatePagePropertyValueSelect;
import org.openapitools.client.model.CreatePagePropertyValueSelectSelect;
import org.openapitools.client.model.CreatePagePropertyValueTitle;
import org.openapitools.client.model.CreatePagePropertyValueUrl;
import org.openapitools.client.model.RichTextItem;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-29T21:44:43.879367+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class CreatePagePropertyValue extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreatePagePropertyValue.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreatePagePropertyValue.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreatePagePropertyValue' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreatePagePropertyValueTitle> adapterCreatePagePropertyValueTitle = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueTitle.class));
            final TypeAdapter<CreatePagePropertyValueRichText> adapterCreatePagePropertyValueRichText = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueRichText.class));
            final TypeAdapter<CreatePagePropertyValueSelect> adapterCreatePagePropertyValueSelect = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueSelect.class));
            final TypeAdapter<CreatePagePropertyValueMultiSelect> adapterCreatePagePropertyValueMultiSelect = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueMultiSelect.class));
            final TypeAdapter<CreatePagePropertyValueNumber> adapterCreatePagePropertyValueNumber = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueNumber.class));
            final TypeAdapter<CreatePagePropertyValueCheckbox> adapterCreatePagePropertyValueCheckbox = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueCheckbox.class));
            final TypeAdapter<CreatePagePropertyValueDate> adapterCreatePagePropertyValueDate = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueDate.class));
            final TypeAdapter<CreatePagePropertyValuePeople> adapterCreatePagePropertyValuePeople = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValuePeople.class));
            final TypeAdapter<CreatePagePropertyValueFiles> adapterCreatePagePropertyValueFiles = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueFiles.class));
            final TypeAdapter<CreatePagePropertyValueUrl> adapterCreatePagePropertyValueUrl = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueUrl.class));
            final TypeAdapter<CreatePagePropertyValueEmail> adapterCreatePagePropertyValueEmail = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueEmail.class));
            final TypeAdapter<CreatePagePropertyValuePhoneNumber> adapterCreatePagePropertyValuePhoneNumber = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValuePhoneNumber.class));
            final TypeAdapter<CreatePagePropertyValueRelation> adapterCreatePagePropertyValueRelation = gson.getDelegateAdapter(this, TypeToken.get(CreatePagePropertyValueRelation.class));

            return (TypeAdapter<T>) new TypeAdapter<CreatePagePropertyValue>() {
                @Override
                public void write(JsonWriter out, CreatePagePropertyValue value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CreatePagePropertyValueTitle`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueTitle) {
                        JsonElement element = adapterCreatePagePropertyValueTitle.toJsonTree((CreatePagePropertyValueTitle)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueRichText`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueRichText) {
                        JsonElement element = adapterCreatePagePropertyValueRichText.toJsonTree((CreatePagePropertyValueRichText)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueSelect`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueSelect) {
                        JsonElement element = adapterCreatePagePropertyValueSelect.toJsonTree((CreatePagePropertyValueSelect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueMultiSelect`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueMultiSelect) {
                        JsonElement element = adapterCreatePagePropertyValueMultiSelect.toJsonTree((CreatePagePropertyValueMultiSelect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueNumber`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueNumber) {
                        JsonElement element = adapterCreatePagePropertyValueNumber.toJsonTree((CreatePagePropertyValueNumber)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueCheckbox`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueCheckbox) {
                        JsonElement element = adapterCreatePagePropertyValueCheckbox.toJsonTree((CreatePagePropertyValueCheckbox)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueDate`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueDate) {
                        JsonElement element = adapterCreatePagePropertyValueDate.toJsonTree((CreatePagePropertyValueDate)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValuePeople`
                    if (value.getActualInstance() instanceof CreatePagePropertyValuePeople) {
                        JsonElement element = adapterCreatePagePropertyValuePeople.toJsonTree((CreatePagePropertyValuePeople)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueFiles`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueFiles) {
                        JsonElement element = adapterCreatePagePropertyValueFiles.toJsonTree((CreatePagePropertyValueFiles)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueUrl`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueUrl) {
                        JsonElement element = adapterCreatePagePropertyValueUrl.toJsonTree((CreatePagePropertyValueUrl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueEmail`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueEmail) {
                        JsonElement element = adapterCreatePagePropertyValueEmail.toJsonTree((CreatePagePropertyValueEmail)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValuePhoneNumber`
                    if (value.getActualInstance() instanceof CreatePagePropertyValuePhoneNumber) {
                        JsonElement element = adapterCreatePagePropertyValuePhoneNumber.toJsonTree((CreatePagePropertyValuePhoneNumber)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreatePagePropertyValueRelation`
                    if (value.getActualInstance() instanceof CreatePagePropertyValueRelation) {
                        JsonElement element = adapterCreatePagePropertyValueRelation.toJsonTree((CreatePagePropertyValueRelation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CreatePagePropertyValueCheckbox, CreatePagePropertyValueDate, CreatePagePropertyValueEmail, CreatePagePropertyValueFiles, CreatePagePropertyValueMultiSelect, CreatePagePropertyValueNumber, CreatePagePropertyValuePeople, CreatePagePropertyValuePhoneNumber, CreatePagePropertyValueRelation, CreatePagePropertyValueRichText, CreatePagePropertyValueSelect, CreatePagePropertyValueTitle, CreatePagePropertyValueUrl");
                }

                @Override
                public CreatePagePropertyValue read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CreatePagePropertyValueTitle
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueTitle.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueTitle;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueTitle'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueTitle failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueTitle'", e);
                    }
                    // deserialize CreatePagePropertyValueRichText
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueRichText.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueRichText;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueRichText'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueRichText failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueRichText'", e);
                    }
                    // deserialize CreatePagePropertyValueSelect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueSelect.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueSelect;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueSelect'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueSelect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueSelect'", e);
                    }
                    // deserialize CreatePagePropertyValueMultiSelect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueMultiSelect.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueMultiSelect;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueMultiSelect'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueMultiSelect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueMultiSelect'", e);
                    }
                    // deserialize CreatePagePropertyValueNumber
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueNumber.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueNumber;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueNumber'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueNumber failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueNumber'", e);
                    }
                    // deserialize CreatePagePropertyValueCheckbox
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueCheckbox.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueCheckbox;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueCheckbox'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueCheckbox failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueCheckbox'", e);
                    }
                    // deserialize CreatePagePropertyValueDate
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueDate.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueDate;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueDate'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueDate failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueDate'", e);
                    }
                    // deserialize CreatePagePropertyValuePeople
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValuePeople.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValuePeople;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValuePeople'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValuePeople failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValuePeople'", e);
                    }
                    // deserialize CreatePagePropertyValueFiles
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueFiles.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueFiles;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueFiles'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueFiles failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueFiles'", e);
                    }
                    // deserialize CreatePagePropertyValueUrl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueUrl.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueUrl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueUrl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueUrl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueUrl'", e);
                    }
                    // deserialize CreatePagePropertyValueEmail
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueEmail.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueEmail;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueEmail'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueEmail failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueEmail'", e);
                    }
                    // deserialize CreatePagePropertyValuePhoneNumber
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValuePhoneNumber.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValuePhoneNumber;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValuePhoneNumber'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValuePhoneNumber failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValuePhoneNumber'", e);
                    }
                    // deserialize CreatePagePropertyValueRelation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreatePagePropertyValueRelation.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreatePagePropertyValueRelation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreatePagePropertyValueRelation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreatePagePropertyValueRelation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreatePagePropertyValueRelation'", e);
                    }

                    if (match == 1) {
                        CreatePagePropertyValue ret = new CreatePagePropertyValue();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreatePagePropertyValue: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreatePagePropertyValue() {
        super("oneOf", Boolean.FALSE);
    }

    public CreatePagePropertyValue(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreatePagePropertyValueTitle", CreatePagePropertyValueTitle.class);
        schemas.put("CreatePagePropertyValueRichText", CreatePagePropertyValueRichText.class);
        schemas.put("CreatePagePropertyValueSelect", CreatePagePropertyValueSelect.class);
        schemas.put("CreatePagePropertyValueMultiSelect", CreatePagePropertyValueMultiSelect.class);
        schemas.put("CreatePagePropertyValueNumber", CreatePagePropertyValueNumber.class);
        schemas.put("CreatePagePropertyValueCheckbox", CreatePagePropertyValueCheckbox.class);
        schemas.put("CreatePagePropertyValueDate", CreatePagePropertyValueDate.class);
        schemas.put("CreatePagePropertyValuePeople", CreatePagePropertyValuePeople.class);
        schemas.put("CreatePagePropertyValueFiles", CreatePagePropertyValueFiles.class);
        schemas.put("CreatePagePropertyValueUrl", CreatePagePropertyValueUrl.class);
        schemas.put("CreatePagePropertyValueEmail", CreatePagePropertyValueEmail.class);
        schemas.put("CreatePagePropertyValuePhoneNumber", CreatePagePropertyValuePhoneNumber.class);
        schemas.put("CreatePagePropertyValueRelation", CreatePagePropertyValueRelation.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreatePagePropertyValue.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CreatePagePropertyValueCheckbox, CreatePagePropertyValueDate, CreatePagePropertyValueEmail, CreatePagePropertyValueFiles, CreatePagePropertyValueMultiSelect, CreatePagePropertyValueNumber, CreatePagePropertyValuePeople, CreatePagePropertyValuePhoneNumber, CreatePagePropertyValueRelation, CreatePagePropertyValueRichText, CreatePagePropertyValueSelect, CreatePagePropertyValueTitle, CreatePagePropertyValueUrl
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CreatePagePropertyValueTitle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueRichText) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueSelect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueMultiSelect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueNumber) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueCheckbox) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueDate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValuePeople) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueFiles) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueUrl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueEmail) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValuePhoneNumber) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePagePropertyValueRelation) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CreatePagePropertyValueCheckbox, CreatePagePropertyValueDate, CreatePagePropertyValueEmail, CreatePagePropertyValueFiles, CreatePagePropertyValueMultiSelect, CreatePagePropertyValueNumber, CreatePagePropertyValuePeople, CreatePagePropertyValuePhoneNumber, CreatePagePropertyValueRelation, CreatePagePropertyValueRichText, CreatePagePropertyValueSelect, CreatePagePropertyValueTitle, CreatePagePropertyValueUrl");
    }

    /**
     * Get the actual instance, which can be the following:
     * CreatePagePropertyValueCheckbox, CreatePagePropertyValueDate, CreatePagePropertyValueEmail, CreatePagePropertyValueFiles, CreatePagePropertyValueMultiSelect, CreatePagePropertyValueNumber, CreatePagePropertyValuePeople, CreatePagePropertyValuePhoneNumber, CreatePagePropertyValueRelation, CreatePagePropertyValueRichText, CreatePagePropertyValueSelect, CreatePagePropertyValueTitle, CreatePagePropertyValueUrl
     *
     * @return The actual instance (CreatePagePropertyValueCheckbox, CreatePagePropertyValueDate, CreatePagePropertyValueEmail, CreatePagePropertyValueFiles, CreatePagePropertyValueMultiSelect, CreatePagePropertyValueNumber, CreatePagePropertyValuePeople, CreatePagePropertyValuePhoneNumber, CreatePagePropertyValueRelation, CreatePagePropertyValueRichText, CreatePagePropertyValueSelect, CreatePagePropertyValueTitle, CreatePagePropertyValueUrl)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueTitle`. If the actual instance is not `CreatePagePropertyValueTitle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueTitle`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueTitle`
     */
    public CreatePagePropertyValueTitle getCreatePagePropertyValueTitle() throws ClassCastException {
        return (CreatePagePropertyValueTitle)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueRichText`. If the actual instance is not `CreatePagePropertyValueRichText`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueRichText`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueRichText`
     */
    public CreatePagePropertyValueRichText getCreatePagePropertyValueRichText() throws ClassCastException {
        return (CreatePagePropertyValueRichText)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueSelect`. If the actual instance is not `CreatePagePropertyValueSelect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueSelect`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueSelect`
     */
    public CreatePagePropertyValueSelect getCreatePagePropertyValueSelect() throws ClassCastException {
        return (CreatePagePropertyValueSelect)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueMultiSelect`. If the actual instance is not `CreatePagePropertyValueMultiSelect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueMultiSelect`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueMultiSelect`
     */
    public CreatePagePropertyValueMultiSelect getCreatePagePropertyValueMultiSelect() throws ClassCastException {
        return (CreatePagePropertyValueMultiSelect)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueNumber`. If the actual instance is not `CreatePagePropertyValueNumber`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueNumber`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueNumber`
     */
    public CreatePagePropertyValueNumber getCreatePagePropertyValueNumber() throws ClassCastException {
        return (CreatePagePropertyValueNumber)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueCheckbox`. If the actual instance is not `CreatePagePropertyValueCheckbox`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueCheckbox`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueCheckbox`
     */
    public CreatePagePropertyValueCheckbox getCreatePagePropertyValueCheckbox() throws ClassCastException {
        return (CreatePagePropertyValueCheckbox)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueDate`. If the actual instance is not `CreatePagePropertyValueDate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueDate`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueDate`
     */
    public CreatePagePropertyValueDate getCreatePagePropertyValueDate() throws ClassCastException {
        return (CreatePagePropertyValueDate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValuePeople`. If the actual instance is not `CreatePagePropertyValuePeople`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValuePeople`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValuePeople`
     */
    public CreatePagePropertyValuePeople getCreatePagePropertyValuePeople() throws ClassCastException {
        return (CreatePagePropertyValuePeople)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueFiles`. If the actual instance is not `CreatePagePropertyValueFiles`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueFiles`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueFiles`
     */
    public CreatePagePropertyValueFiles getCreatePagePropertyValueFiles() throws ClassCastException {
        return (CreatePagePropertyValueFiles)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueUrl`. If the actual instance is not `CreatePagePropertyValueUrl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueUrl`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueUrl`
     */
    public CreatePagePropertyValueUrl getCreatePagePropertyValueUrl() throws ClassCastException {
        return (CreatePagePropertyValueUrl)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueEmail`. If the actual instance is not `CreatePagePropertyValueEmail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueEmail`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueEmail`
     */
    public CreatePagePropertyValueEmail getCreatePagePropertyValueEmail() throws ClassCastException {
        return (CreatePagePropertyValueEmail)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValuePhoneNumber`. If the actual instance is not `CreatePagePropertyValuePhoneNumber`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValuePhoneNumber`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValuePhoneNumber`
     */
    public CreatePagePropertyValuePhoneNumber getCreatePagePropertyValuePhoneNumber() throws ClassCastException {
        return (CreatePagePropertyValuePhoneNumber)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreatePagePropertyValueRelation`. If the actual instance is not `CreatePagePropertyValueRelation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePagePropertyValueRelation`
     * @throws ClassCastException if the instance is not `CreatePagePropertyValueRelation`
     */
    public CreatePagePropertyValueRelation getCreatePagePropertyValueRelation() throws ClassCastException {
        return (CreatePagePropertyValueRelation)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreatePagePropertyValue
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CreatePagePropertyValueTitle
        try {
            CreatePagePropertyValueTitle.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueTitle failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueRichText
        try {
            CreatePagePropertyValueRichText.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueRichText failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueSelect
        try {
            CreatePagePropertyValueSelect.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueSelect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueMultiSelect
        try {
            CreatePagePropertyValueMultiSelect.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueMultiSelect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueNumber
        try {
            CreatePagePropertyValueNumber.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueNumber failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueCheckbox
        try {
            CreatePagePropertyValueCheckbox.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueCheckbox failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueDate
        try {
            CreatePagePropertyValueDate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueDate failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValuePeople
        try {
            CreatePagePropertyValuePeople.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValuePeople failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueFiles
        try {
            CreatePagePropertyValueFiles.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueFiles failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueUrl
        try {
            CreatePagePropertyValueUrl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueUrl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueEmail
        try {
            CreatePagePropertyValueEmail.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueEmail failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValuePhoneNumber
        try {
            CreatePagePropertyValuePhoneNumber.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValuePhoneNumber failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreatePagePropertyValueRelation
        try {
            CreatePagePropertyValueRelation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreatePagePropertyValueRelation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for CreatePagePropertyValue with oneOf schemas: CreatePagePropertyValueCheckbox, CreatePagePropertyValueDate, CreatePagePropertyValueEmail, CreatePagePropertyValueFiles, CreatePagePropertyValueMultiSelect, CreatePagePropertyValueNumber, CreatePagePropertyValuePeople, CreatePagePropertyValuePhoneNumber, CreatePagePropertyValueRelation, CreatePagePropertyValueRichText, CreatePagePropertyValueSelect, CreatePagePropertyValueTitle, CreatePagePropertyValueUrl. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of CreatePagePropertyValue given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreatePagePropertyValue
     * @throws IOException if the JSON string is invalid with respect to CreatePagePropertyValue
     */
    public static CreatePagePropertyValue fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreatePagePropertyValue.class);
    }

    /**
     * Convert an instance of CreatePagePropertyValue to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

