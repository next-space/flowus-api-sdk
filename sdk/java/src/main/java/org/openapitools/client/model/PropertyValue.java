/*
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePagePropertyValueRelationRelationInner;
import org.openapitools.client.model.PropertyValueCheckbox;
import org.openapitools.client.model.PropertyValueDate;
import org.openapitools.client.model.PropertyValueDateDate;
import org.openapitools.client.model.PropertyValueEmail;
import org.openapitools.client.model.PropertyValueFiles;
import org.openapitools.client.model.PropertyValueFilesFilesInner;
import org.openapitools.client.model.PropertyValueMultiSelect;
import org.openapitools.client.model.PropertyValueMultiSelectMultiSelectInner;
import org.openapitools.client.model.PropertyValueNumber;
import org.openapitools.client.model.PropertyValuePeople;
import org.openapitools.client.model.PropertyValuePeoplePeopleInner;
import org.openapitools.client.model.PropertyValuePhoneNumber;
import org.openapitools.client.model.PropertyValueRelation;
import org.openapitools.client.model.PropertyValueRichText;
import org.openapitools.client.model.PropertyValueSelect;
import org.openapitools.client.model.PropertyValueSelectSelect;
import org.openapitools.client.model.PropertyValueTitle;
import org.openapitools.client.model.PropertyValueUrl;
import org.openapitools.client.model.RichTextItem;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-29T21:44:43.879367+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class PropertyValue extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PropertyValue.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PropertyValue.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PropertyValue' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PropertyValueTitle> adapterPropertyValueTitle = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueTitle.class));
            final TypeAdapter<PropertyValueRichText> adapterPropertyValueRichText = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueRichText.class));
            final TypeAdapter<PropertyValueNumber> adapterPropertyValueNumber = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueNumber.class));
            final TypeAdapter<PropertyValueSelect> adapterPropertyValueSelect = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueSelect.class));
            final TypeAdapter<PropertyValueMultiSelect> adapterPropertyValueMultiSelect = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueMultiSelect.class));
            final TypeAdapter<PropertyValueDate> adapterPropertyValueDate = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueDate.class));
            final TypeAdapter<PropertyValuePeople> adapterPropertyValuePeople = gson.getDelegateAdapter(this, TypeToken.get(PropertyValuePeople.class));
            final TypeAdapter<PropertyValueFiles> adapterPropertyValueFiles = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueFiles.class));
            final TypeAdapter<PropertyValueCheckbox> adapterPropertyValueCheckbox = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueCheckbox.class));
            final TypeAdapter<PropertyValueUrl> adapterPropertyValueUrl = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueUrl.class));
            final TypeAdapter<PropertyValueEmail> adapterPropertyValueEmail = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueEmail.class));
            final TypeAdapter<PropertyValuePhoneNumber> adapterPropertyValuePhoneNumber = gson.getDelegateAdapter(this, TypeToken.get(PropertyValuePhoneNumber.class));
            final TypeAdapter<PropertyValueRelation> adapterPropertyValueRelation = gson.getDelegateAdapter(this, TypeToken.get(PropertyValueRelation.class));

            return (TypeAdapter<T>) new TypeAdapter<PropertyValue>() {
                @Override
                public void write(JsonWriter out, PropertyValue value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PropertyValueTitle`
                    if (value.getActualInstance() instanceof PropertyValueTitle) {
                        JsonElement element = adapterPropertyValueTitle.toJsonTree((PropertyValueTitle)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueRichText`
                    if (value.getActualInstance() instanceof PropertyValueRichText) {
                        JsonElement element = adapterPropertyValueRichText.toJsonTree((PropertyValueRichText)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueNumber`
                    if (value.getActualInstance() instanceof PropertyValueNumber) {
                        JsonElement element = adapterPropertyValueNumber.toJsonTree((PropertyValueNumber)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueSelect`
                    if (value.getActualInstance() instanceof PropertyValueSelect) {
                        JsonElement element = adapterPropertyValueSelect.toJsonTree((PropertyValueSelect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueMultiSelect`
                    if (value.getActualInstance() instanceof PropertyValueMultiSelect) {
                        JsonElement element = adapterPropertyValueMultiSelect.toJsonTree((PropertyValueMultiSelect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueDate`
                    if (value.getActualInstance() instanceof PropertyValueDate) {
                        JsonElement element = adapterPropertyValueDate.toJsonTree((PropertyValueDate)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValuePeople`
                    if (value.getActualInstance() instanceof PropertyValuePeople) {
                        JsonElement element = adapterPropertyValuePeople.toJsonTree((PropertyValuePeople)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueFiles`
                    if (value.getActualInstance() instanceof PropertyValueFiles) {
                        JsonElement element = adapterPropertyValueFiles.toJsonTree((PropertyValueFiles)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueCheckbox`
                    if (value.getActualInstance() instanceof PropertyValueCheckbox) {
                        JsonElement element = adapterPropertyValueCheckbox.toJsonTree((PropertyValueCheckbox)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueUrl`
                    if (value.getActualInstance() instanceof PropertyValueUrl) {
                        JsonElement element = adapterPropertyValueUrl.toJsonTree((PropertyValueUrl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueEmail`
                    if (value.getActualInstance() instanceof PropertyValueEmail) {
                        JsonElement element = adapterPropertyValueEmail.toJsonTree((PropertyValueEmail)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValuePhoneNumber`
                    if (value.getActualInstance() instanceof PropertyValuePhoneNumber) {
                        JsonElement element = adapterPropertyValuePhoneNumber.toJsonTree((PropertyValuePhoneNumber)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertyValueRelation`
                    if (value.getActualInstance() instanceof PropertyValueRelation) {
                        JsonElement element = adapterPropertyValueRelation.toJsonTree((PropertyValueRelation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: PropertyValueCheckbox, PropertyValueDate, PropertyValueEmail, PropertyValueFiles, PropertyValueMultiSelect, PropertyValueNumber, PropertyValuePeople, PropertyValuePhoneNumber, PropertyValueRelation, PropertyValueRichText, PropertyValueSelect, PropertyValueTitle, PropertyValueUrl");
                }

                @Override
                public PropertyValue read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PropertyValueTitle
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueTitle.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueTitle;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueTitle'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueTitle failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueTitle'", e);
                    }
                    // deserialize PropertyValueRichText
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueRichText.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueRichText;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueRichText'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueRichText failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueRichText'", e);
                    }
                    // deserialize PropertyValueNumber
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueNumber.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueNumber;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueNumber'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueNumber failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueNumber'", e);
                    }
                    // deserialize PropertyValueSelect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueSelect.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueSelect;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueSelect'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueSelect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueSelect'", e);
                    }
                    // deserialize PropertyValueMultiSelect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueMultiSelect.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueMultiSelect;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueMultiSelect'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueMultiSelect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueMultiSelect'", e);
                    }
                    // deserialize PropertyValueDate
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueDate.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueDate;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueDate'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueDate failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueDate'", e);
                    }
                    // deserialize PropertyValuePeople
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValuePeople.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValuePeople;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValuePeople'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValuePeople failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValuePeople'", e);
                    }
                    // deserialize PropertyValueFiles
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueFiles.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueFiles;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueFiles'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueFiles failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueFiles'", e);
                    }
                    // deserialize PropertyValueCheckbox
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueCheckbox.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueCheckbox;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueCheckbox'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueCheckbox failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueCheckbox'", e);
                    }
                    // deserialize PropertyValueUrl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueUrl.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueUrl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueUrl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueUrl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueUrl'", e);
                    }
                    // deserialize PropertyValueEmail
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueEmail.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueEmail;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueEmail'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueEmail failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueEmail'", e);
                    }
                    // deserialize PropertyValuePhoneNumber
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValuePhoneNumber.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValuePhoneNumber;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValuePhoneNumber'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValuePhoneNumber failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValuePhoneNumber'", e);
                    }
                    // deserialize PropertyValueRelation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertyValueRelation.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertyValueRelation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PropertyValueRelation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertyValueRelation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertyValueRelation'", e);
                    }

                    if (match == 1) {
                        PropertyValue ret = new PropertyValue();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for PropertyValue: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PropertyValue() {
        super("oneOf", Boolean.FALSE);
    }

    public PropertyValue(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PropertyValueTitle", PropertyValueTitle.class);
        schemas.put("PropertyValueRichText", PropertyValueRichText.class);
        schemas.put("PropertyValueNumber", PropertyValueNumber.class);
        schemas.put("PropertyValueSelect", PropertyValueSelect.class);
        schemas.put("PropertyValueMultiSelect", PropertyValueMultiSelect.class);
        schemas.put("PropertyValueDate", PropertyValueDate.class);
        schemas.put("PropertyValuePeople", PropertyValuePeople.class);
        schemas.put("PropertyValueFiles", PropertyValueFiles.class);
        schemas.put("PropertyValueCheckbox", PropertyValueCheckbox.class);
        schemas.put("PropertyValueUrl", PropertyValueUrl.class);
        schemas.put("PropertyValueEmail", PropertyValueEmail.class);
        schemas.put("PropertyValuePhoneNumber", PropertyValuePhoneNumber.class);
        schemas.put("PropertyValueRelation", PropertyValueRelation.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PropertyValue.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PropertyValueCheckbox, PropertyValueDate, PropertyValueEmail, PropertyValueFiles, PropertyValueMultiSelect, PropertyValueNumber, PropertyValuePeople, PropertyValuePhoneNumber, PropertyValueRelation, PropertyValueRichText, PropertyValueSelect, PropertyValueTitle, PropertyValueUrl
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PropertyValueTitle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueRichText) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueNumber) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueSelect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueMultiSelect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueDate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValuePeople) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueFiles) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueCheckbox) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueUrl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueEmail) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValuePhoneNumber) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertyValueRelation) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PropertyValueCheckbox, PropertyValueDate, PropertyValueEmail, PropertyValueFiles, PropertyValueMultiSelect, PropertyValueNumber, PropertyValuePeople, PropertyValuePhoneNumber, PropertyValueRelation, PropertyValueRichText, PropertyValueSelect, PropertyValueTitle, PropertyValueUrl");
    }

    /**
     * Get the actual instance, which can be the following:
     * PropertyValueCheckbox, PropertyValueDate, PropertyValueEmail, PropertyValueFiles, PropertyValueMultiSelect, PropertyValueNumber, PropertyValuePeople, PropertyValuePhoneNumber, PropertyValueRelation, PropertyValueRichText, PropertyValueSelect, PropertyValueTitle, PropertyValueUrl
     *
     * @return The actual instance (PropertyValueCheckbox, PropertyValueDate, PropertyValueEmail, PropertyValueFiles, PropertyValueMultiSelect, PropertyValueNumber, PropertyValuePeople, PropertyValuePhoneNumber, PropertyValueRelation, PropertyValueRichText, PropertyValueSelect, PropertyValueTitle, PropertyValueUrl)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueTitle`. If the actual instance is not `PropertyValueTitle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueTitle`
     * @throws ClassCastException if the instance is not `PropertyValueTitle`
     */
    public PropertyValueTitle getPropertyValueTitle() throws ClassCastException {
        return (PropertyValueTitle)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueRichText`. If the actual instance is not `PropertyValueRichText`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueRichText`
     * @throws ClassCastException if the instance is not `PropertyValueRichText`
     */
    public PropertyValueRichText getPropertyValueRichText() throws ClassCastException {
        return (PropertyValueRichText)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueNumber`. If the actual instance is not `PropertyValueNumber`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueNumber`
     * @throws ClassCastException if the instance is not `PropertyValueNumber`
     */
    public PropertyValueNumber getPropertyValueNumber() throws ClassCastException {
        return (PropertyValueNumber)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueSelect`. If the actual instance is not `PropertyValueSelect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueSelect`
     * @throws ClassCastException if the instance is not `PropertyValueSelect`
     */
    public PropertyValueSelect getPropertyValueSelect() throws ClassCastException {
        return (PropertyValueSelect)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueMultiSelect`. If the actual instance is not `PropertyValueMultiSelect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueMultiSelect`
     * @throws ClassCastException if the instance is not `PropertyValueMultiSelect`
     */
    public PropertyValueMultiSelect getPropertyValueMultiSelect() throws ClassCastException {
        return (PropertyValueMultiSelect)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueDate`. If the actual instance is not `PropertyValueDate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueDate`
     * @throws ClassCastException if the instance is not `PropertyValueDate`
     */
    public PropertyValueDate getPropertyValueDate() throws ClassCastException {
        return (PropertyValueDate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValuePeople`. If the actual instance is not `PropertyValuePeople`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValuePeople`
     * @throws ClassCastException if the instance is not `PropertyValuePeople`
     */
    public PropertyValuePeople getPropertyValuePeople() throws ClassCastException {
        return (PropertyValuePeople)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueFiles`. If the actual instance is not `PropertyValueFiles`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueFiles`
     * @throws ClassCastException if the instance is not `PropertyValueFiles`
     */
    public PropertyValueFiles getPropertyValueFiles() throws ClassCastException {
        return (PropertyValueFiles)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueCheckbox`. If the actual instance is not `PropertyValueCheckbox`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueCheckbox`
     * @throws ClassCastException if the instance is not `PropertyValueCheckbox`
     */
    public PropertyValueCheckbox getPropertyValueCheckbox() throws ClassCastException {
        return (PropertyValueCheckbox)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueUrl`. If the actual instance is not `PropertyValueUrl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueUrl`
     * @throws ClassCastException if the instance is not `PropertyValueUrl`
     */
    public PropertyValueUrl getPropertyValueUrl() throws ClassCastException {
        return (PropertyValueUrl)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueEmail`. If the actual instance is not `PropertyValueEmail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueEmail`
     * @throws ClassCastException if the instance is not `PropertyValueEmail`
     */
    public PropertyValueEmail getPropertyValueEmail() throws ClassCastException {
        return (PropertyValueEmail)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValuePhoneNumber`. If the actual instance is not `PropertyValuePhoneNumber`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValuePhoneNumber`
     * @throws ClassCastException if the instance is not `PropertyValuePhoneNumber`
     */
    public PropertyValuePhoneNumber getPropertyValuePhoneNumber() throws ClassCastException {
        return (PropertyValuePhoneNumber)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertyValueRelation`. If the actual instance is not `PropertyValueRelation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertyValueRelation`
     * @throws ClassCastException if the instance is not `PropertyValueRelation`
     */
    public PropertyValueRelation getPropertyValueRelation() throws ClassCastException {
        return (PropertyValueRelation)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PropertyValue
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PropertyValueTitle
        try {
            PropertyValueTitle.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueTitle failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueRichText
        try {
            PropertyValueRichText.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueRichText failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueNumber
        try {
            PropertyValueNumber.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueNumber failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueSelect
        try {
            PropertyValueSelect.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueSelect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueMultiSelect
        try {
            PropertyValueMultiSelect.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueMultiSelect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueDate
        try {
            PropertyValueDate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueDate failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValuePeople
        try {
            PropertyValuePeople.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValuePeople failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueFiles
        try {
            PropertyValueFiles.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueFiles failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueCheckbox
        try {
            PropertyValueCheckbox.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueCheckbox failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueUrl
        try {
            PropertyValueUrl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueUrl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueEmail
        try {
            PropertyValueEmail.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueEmail failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValuePhoneNumber
        try {
            PropertyValuePhoneNumber.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValuePhoneNumber failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertyValueRelation
        try {
            PropertyValueRelation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertyValueRelation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for PropertyValue with oneOf schemas: PropertyValueCheckbox, PropertyValueDate, PropertyValueEmail, PropertyValueFiles, PropertyValueMultiSelect, PropertyValueNumber, PropertyValuePeople, PropertyValuePhoneNumber, PropertyValueRelation, PropertyValueRichText, PropertyValueSelect, PropertyValueTitle, PropertyValueUrl. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of PropertyValue given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PropertyValue
     * @throws IOException if the JSON string is invalid with respect to PropertyValue
     */
    public static PropertyValue fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PropertyValue.class);
    }

    /**
     * Convert an instance of PropertyValue to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

