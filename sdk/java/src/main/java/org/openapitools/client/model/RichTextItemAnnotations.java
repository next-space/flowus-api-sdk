/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RichTextItemAnnotations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-02T17:17:19.267825+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class RichTextItemAnnotations {
  public static final String SERIALIZED_NAME_BOLD = "bold";
  @SerializedName(SERIALIZED_NAME_BOLD)
  @javax.annotation.Nullable
  private Boolean bold;

  public static final String SERIALIZED_NAME_ITALIC = "italic";
  @SerializedName(SERIALIZED_NAME_ITALIC)
  @javax.annotation.Nullable
  private Boolean italic;

  public static final String SERIALIZED_NAME_STRIKETHROUGH = "strikethrough";
  @SerializedName(SERIALIZED_NAME_STRIKETHROUGH)
  @javax.annotation.Nullable
  private Boolean strikethrough;

  public static final String SERIALIZED_NAME_UNDERLINE = "underline";
  @SerializedName(SERIALIZED_NAME_UNDERLINE)
  @javax.annotation.Nullable
  private Boolean underline;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private Boolean code;

  /**
   * Gets or Sets color
   */
  @JsonAdapter(ColorEnum.Adapter.class)
  public enum ColorEnum {
    DEFAULT("default"),
    
    GRAY("gray"),
    
    BROWN("brown"),
    
    ORANGE("orange"),
    
    YELLOW("yellow"),
    
    GREEN("green"),
    
    BLUE("blue"),
    
    PURPLE("purple"),
    
    PINK("pink"),
    
    RED("red");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorEnum fromValue(String value) {
      for (ColorEnum b : ColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  @javax.annotation.Nullable
  private ColorEnum color;

  public RichTextItemAnnotations() {
  }

  public RichTextItemAnnotations bold(@javax.annotation.Nullable Boolean bold) {
    this.bold = bold;
    return this;
  }

  /**
   * Get bold
   * @return bold
   */
  @javax.annotation.Nullable
  public Boolean getBold() {
    return bold;
  }

  public void setBold(@javax.annotation.Nullable Boolean bold) {
    this.bold = bold;
  }


  public RichTextItemAnnotations italic(@javax.annotation.Nullable Boolean italic) {
    this.italic = italic;
    return this;
  }

  /**
   * Get italic
   * @return italic
   */
  @javax.annotation.Nullable
  public Boolean getItalic() {
    return italic;
  }

  public void setItalic(@javax.annotation.Nullable Boolean italic) {
    this.italic = italic;
  }


  public RichTextItemAnnotations strikethrough(@javax.annotation.Nullable Boolean strikethrough) {
    this.strikethrough = strikethrough;
    return this;
  }

  /**
   * Get strikethrough
   * @return strikethrough
   */
  @javax.annotation.Nullable
  public Boolean getStrikethrough() {
    return strikethrough;
  }

  public void setStrikethrough(@javax.annotation.Nullable Boolean strikethrough) {
    this.strikethrough = strikethrough;
  }


  public RichTextItemAnnotations underline(@javax.annotation.Nullable Boolean underline) {
    this.underline = underline;
    return this;
  }

  /**
   * Get underline
   * @return underline
   */
  @javax.annotation.Nullable
  public Boolean getUnderline() {
    return underline;
  }

  public void setUnderline(@javax.annotation.Nullable Boolean underline) {
    this.underline = underline;
  }


  public RichTextItemAnnotations code(@javax.annotation.Nullable Boolean code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public Boolean getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable Boolean code) {
    this.code = code;
  }


  public RichTextItemAnnotations color(@javax.annotation.Nullable ColorEnum color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public ColorEnum getColor() {
    return color;
  }

  public void setColor(@javax.annotation.Nullable ColorEnum color) {
    this.color = color;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RichTextItemAnnotations richTextItemAnnotations = (RichTextItemAnnotations) o;
    return Objects.equals(this.bold, richTextItemAnnotations.bold) &&
        Objects.equals(this.italic, richTextItemAnnotations.italic) &&
        Objects.equals(this.strikethrough, richTextItemAnnotations.strikethrough) &&
        Objects.equals(this.underline, richTextItemAnnotations.underline) &&
        Objects.equals(this.code, richTextItemAnnotations.code) &&
        Objects.equals(this.color, richTextItemAnnotations.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bold, italic, strikethrough, underline, code, color);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RichTextItemAnnotations {\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    italic: ").append(toIndentedString(italic)).append("\n");
    sb.append("    strikethrough: ").append(toIndentedString(strikethrough)).append("\n");
    sb.append("    underline: ").append(toIndentedString(underline)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("bold", "italic", "strikethrough", "underline", "code", "color"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RichTextItemAnnotations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RichTextItemAnnotations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RichTextItemAnnotations is not found in the empty JSON string", RichTextItemAnnotations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RichTextItemAnnotations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RichTextItemAnnotations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        ColorEnum.validateJsonElement(jsonObj.get("color"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RichTextItemAnnotations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RichTextItemAnnotations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RichTextItemAnnotations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RichTextItemAnnotations.class));

       return (TypeAdapter<T>) new TypeAdapter<RichTextItemAnnotations>() {
           @Override
           public void write(JsonWriter out, RichTextItemAnnotations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RichTextItemAnnotations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RichTextItemAnnotations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RichTextItemAnnotations
   * @throws IOException if the JSON string is invalid with respect to RichTextItemAnnotations
   */
  public static RichTextItemAnnotations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RichTextItemAnnotations.class);
  }

  /**
   * Convert an instance of RichTextItemAnnotations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

