/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BlockDataExternal;
import org.openapitools.client.model.BlockDataFile;
import org.openapitools.client.model.BlockDataSyncedFrom;
import org.openapitools.client.model.Icon;
import org.openapitools.client.model.RichTextItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 块类型特定的数据内容
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-02T17:17:19.267825+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class BlockData {
  public static final String SERIALIZED_NAME_RICH_TEXT = "rich_text";
  @SerializedName(SERIALIZED_NAME_RICH_TEXT)
  @javax.annotation.Nullable
  private List<RichTextItem> richText = new ArrayList<>();

  /**
   * 文本颜色
   */
  @JsonAdapter(TextColorEnum.Adapter.class)
  public enum TextColorEnum {
    DEFAULT("default"),
    
    GRAY("gray"),
    
    BROWN("brown"),
    
    ORANGE("orange"),
    
    YELLOW("yellow"),
    
    GREEN("green"),
    
    BLUE("blue"),
    
    PURPLE("purple"),
    
    PINK("pink"),
    
    RED("red");

    private String value;

    TextColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextColorEnum fromValue(String value) {
      for (TextColorEnum b : TextColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextColorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextColorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_COLOR = "text_color";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  @javax.annotation.Nullable
  private TextColorEnum textColor;

  /**
   * 背景颜色
   */
  @JsonAdapter(BackgroundColorEnum.Adapter.class)
  public enum BackgroundColorEnum {
    DEFAULT("default"),
    
    GRAY("gray"),
    
    BROWN("brown"),
    
    ORANGE("orange"),
    
    YELLOW("yellow"),
    
    GREEN("green"),
    
    BLUE("blue"),
    
    PURPLE("purple"),
    
    PINK("pink"),
    
    RED("red");

    private String value;

    BackgroundColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackgroundColorEnum fromValue(String value) {
      for (BackgroundColorEnum b : BackgroundColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackgroundColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackgroundColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackgroundColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackgroundColorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackgroundColorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "background_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  @javax.annotation.Nullable
  private BackgroundColorEnum backgroundColor;

  public static final String SERIALIZED_NAME_CHECKED = "checked";
  @SerializedName(SERIALIZED_NAME_CHECKED)
  @javax.annotation.Nullable
  private Boolean checked;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  @javax.annotation.Nullable
  private List<RichTextItem> caption = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  @javax.annotation.Nullable
  private Icon icon;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  @javax.annotation.Nullable
  private String expression;

  public static final String SERIALIZED_NAME_PAGE_ID = "page_id";
  @SerializedName(SERIALIZED_NAME_PAGE_ID)
  @javax.annotation.Nullable
  private UUID pageId;

  public static final String SERIALIZED_NAME_TABLE_WIDTH = "table_width";
  @SerializedName(SERIALIZED_NAME_TABLE_WIDTH)
  @javax.annotation.Nullable
  private Integer tableWidth;

  public static final String SERIALIZED_NAME_HAS_COLUMN_HEADER = "has_column_header";
  @SerializedName(SERIALIZED_NAME_HAS_COLUMN_HEADER)
  @javax.annotation.Nullable
  private Boolean hasColumnHeader;

  public static final String SERIALIZED_NAME_HAS_ROW_HEADER = "has_row_header";
  @SerializedName(SERIALIZED_NAME_HAS_ROW_HEADER)
  @javax.annotation.Nullable
  private Boolean hasRowHeader;

  public static final String SERIALIZED_NAME_CELLS = "cells";
  @SerializedName(SERIALIZED_NAME_CELLS)
  @javax.annotation.Nullable
  private List<List<RichTextItem>> cells = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_SYNCED_FROM = "synced_from";
  @SerializedName(SERIALIZED_NAME_SYNCED_FROM)
  @javax.annotation.Nullable
  private BlockDataSyncedFrom syncedFrom;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  @javax.annotation.Nullable
  private BlockDataFile _file;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  @javax.annotation.Nullable
  private BlockDataExternal external;

  public BlockData() {
  }

  public BlockData richText(@javax.annotation.Nullable List<RichTextItem> richText) {
    this.richText = richText;
    return this;
  }

  public BlockData addRichTextItem(RichTextItem richTextItem) {
    if (this.richText == null) {
      this.richText = new ArrayList<>();
    }
    this.richText.add(richTextItem);
    return this;
  }

  /**
   * 富文本内容
   * @return richText
   */
  @javax.annotation.Nullable
  public List<RichTextItem> getRichText() {
    return richText;
  }

  public void setRichText(@javax.annotation.Nullable List<RichTextItem> richText) {
    this.richText = richText;
  }


  public BlockData textColor(@javax.annotation.Nullable TextColorEnum textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * 文本颜色
   * @return textColor
   */
  @javax.annotation.Nullable
  public TextColorEnum getTextColor() {
    return textColor;
  }

  public void setTextColor(@javax.annotation.Nullable TextColorEnum textColor) {
    this.textColor = textColor;
  }


  public BlockData backgroundColor(@javax.annotation.Nullable BackgroundColorEnum backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * 背景颜色
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public BackgroundColorEnum getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(@javax.annotation.Nullable BackgroundColorEnum backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public BlockData checked(@javax.annotation.Nullable Boolean checked) {
    this.checked = checked;
    return this;
  }

  /**
   * 待办事项是否完成
   * @return checked
   */
  @javax.annotation.Nullable
  public Boolean getChecked() {
    return checked;
  }

  public void setChecked(@javax.annotation.Nullable Boolean checked) {
    this.checked = checked;
  }


  public BlockData language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * 代码块语言
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public BlockData url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * 链接地址
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public BlockData caption(@javax.annotation.Nullable List<RichTextItem> caption) {
    this.caption = caption;
    return this;
  }

  public BlockData addCaptionItem(RichTextItem captionItem) {
    if (this.caption == null) {
      this.caption = new ArrayList<>();
    }
    this.caption.add(captionItem);
    return this;
  }

  /**
   * 说明文字
   * @return caption
   */
  @javax.annotation.Nullable
  public List<RichTextItem> getCaption() {
    return caption;
  }

  public void setCaption(@javax.annotation.Nullable List<RichTextItem> caption) {
    this.caption = caption;
  }


  public BlockData icon(@javax.annotation.Nullable Icon icon) {
    this.icon = icon;
    return this;
  }

  /**
   * 图标
   * @return icon
   */
  @javax.annotation.Nullable
  public Icon getIcon() {
    return icon;
  }

  public void setIcon(@javax.annotation.Nullable Icon icon) {
    this.icon = icon;
  }


  public BlockData expression(@javax.annotation.Nullable String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * 数学公式表达式
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(@javax.annotation.Nullable String expression) {
    this.expression = expression;
  }


  public BlockData pageId(@javax.annotation.Nullable UUID pageId) {
    this.pageId = pageId;
    return this;
  }

  /**
   * 页面引用ID
   * @return pageId
   */
  @javax.annotation.Nullable
  public UUID getPageId() {
    return pageId;
  }

  public void setPageId(@javax.annotation.Nullable UUID pageId) {
    this.pageId = pageId;
  }


  public BlockData tableWidth(@javax.annotation.Nullable Integer tableWidth) {
    this.tableWidth = tableWidth;
    return this;
  }

  /**
   * 表格列数
   * @return tableWidth
   */
  @javax.annotation.Nullable
  public Integer getTableWidth() {
    return tableWidth;
  }

  public void setTableWidth(@javax.annotation.Nullable Integer tableWidth) {
    this.tableWidth = tableWidth;
  }


  public BlockData hasColumnHeader(@javax.annotation.Nullable Boolean hasColumnHeader) {
    this.hasColumnHeader = hasColumnHeader;
    return this;
  }

  /**
   * 是否有列标题
   * @return hasColumnHeader
   */
  @javax.annotation.Nullable
  public Boolean getHasColumnHeader() {
    return hasColumnHeader;
  }

  public void setHasColumnHeader(@javax.annotation.Nullable Boolean hasColumnHeader) {
    this.hasColumnHeader = hasColumnHeader;
  }


  public BlockData hasRowHeader(@javax.annotation.Nullable Boolean hasRowHeader) {
    this.hasRowHeader = hasRowHeader;
    return this;
  }

  /**
   * 是否有行标题
   * @return hasRowHeader
   */
  @javax.annotation.Nullable
  public Boolean getHasRowHeader() {
    return hasRowHeader;
  }

  public void setHasRowHeader(@javax.annotation.Nullable Boolean hasRowHeader) {
    this.hasRowHeader = hasRowHeader;
  }


  public BlockData cells(@javax.annotation.Nullable List<List<RichTextItem>> cells) {
    this.cells = cells;
    return this;
  }

  public BlockData addCellsItem(List<RichTextItem> cellsItem) {
    if (this.cells == null) {
      this.cells = new ArrayList<>();
    }
    this.cells.add(cellsItem);
    return this;
  }

  /**
   * 表格单元格内容
   * @return cells
   */
  @javax.annotation.Nullable
  public List<List<RichTextItem>> getCells() {
    return cells;
  }

  public void setCells(@javax.annotation.Nullable List<List<RichTextItem>> cells) {
    this.cells = cells;
  }


  public BlockData title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * 子页面或子数据库标题
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public BlockData syncedFrom(@javax.annotation.Nullable BlockDataSyncedFrom syncedFrom) {
    this.syncedFrom = syncedFrom;
    return this;
  }

  /**
   * Get syncedFrom
   * @return syncedFrom
   */
  @javax.annotation.Nullable
  public BlockDataSyncedFrom getSyncedFrom() {
    return syncedFrom;
  }

  public void setSyncedFrom(@javax.annotation.Nullable BlockDataSyncedFrom syncedFrom) {
    this.syncedFrom = syncedFrom;
  }


  public BlockData _file(@javax.annotation.Nullable BlockDataFile _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public BlockDataFile getFile() {
    return _file;
  }

  public void setFile(@javax.annotation.Nullable BlockDataFile _file) {
    this._file = _file;
  }


  public BlockData external(@javax.annotation.Nullable BlockDataExternal external) {
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @javax.annotation.Nullable
  public BlockDataExternal getExternal() {
    return external;
  }

  public void setExternal(@javax.annotation.Nullable BlockDataExternal external) {
    this.external = external;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockData blockData = (BlockData) o;
    return Objects.equals(this.richText, blockData.richText) &&
        Objects.equals(this.textColor, blockData.textColor) &&
        Objects.equals(this.backgroundColor, blockData.backgroundColor) &&
        Objects.equals(this.checked, blockData.checked) &&
        Objects.equals(this.language, blockData.language) &&
        Objects.equals(this.url, blockData.url) &&
        Objects.equals(this.caption, blockData.caption) &&
        Objects.equals(this.icon, blockData.icon) &&
        Objects.equals(this.expression, blockData.expression) &&
        Objects.equals(this.pageId, blockData.pageId) &&
        Objects.equals(this.tableWidth, blockData.tableWidth) &&
        Objects.equals(this.hasColumnHeader, blockData.hasColumnHeader) &&
        Objects.equals(this.hasRowHeader, blockData.hasRowHeader) &&
        Objects.equals(this.cells, blockData.cells) &&
        Objects.equals(this.title, blockData.title) &&
        Objects.equals(this.syncedFrom, blockData.syncedFrom) &&
        Objects.equals(this._file, blockData._file) &&
        Objects.equals(this.external, blockData.external);
  }

  @Override
  public int hashCode() {
    return Objects.hash(richText, textColor, backgroundColor, checked, language, url, caption, icon, expression, pageId, tableWidth, hasColumnHeader, hasRowHeader, cells, title, syncedFrom, _file, external);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockData {\n");
    sb.append("    richText: ").append(toIndentedString(richText)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    checked: ").append(toIndentedString(checked)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    pageId: ").append(toIndentedString(pageId)).append("\n");
    sb.append("    tableWidth: ").append(toIndentedString(tableWidth)).append("\n");
    sb.append("    hasColumnHeader: ").append(toIndentedString(hasColumnHeader)).append("\n");
    sb.append("    hasRowHeader: ").append(toIndentedString(hasRowHeader)).append("\n");
    sb.append("    cells: ").append(toIndentedString(cells)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    syncedFrom: ").append(toIndentedString(syncedFrom)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("rich_text", "text_color", "background_color", "checked", "language", "url", "caption", "icon", "expression", "page_id", "table_width", "has_column_header", "has_row_header", "cells", "title", "synced_from", "file", "external"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlockData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockData is not found in the empty JSON string", BlockData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rich_text") != null && !jsonObj.get("rich_text").isJsonNull()) {
        JsonArray jsonArrayrichText = jsonObj.getAsJsonArray("rich_text");
        if (jsonArrayrichText != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rich_text").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rich_text` to be an array in the JSON string but got `%s`", jsonObj.get("rich_text").toString()));
          }

          // validate the optional field `rich_text` (array)
          for (int i = 0; i < jsonArrayrichText.size(); i++) {
            RichTextItem.validateJsonElement(jsonArrayrichText.get(i));
          };
        }
      }
      if ((jsonObj.get("text_color") != null && !jsonObj.get("text_color").isJsonNull()) && !jsonObj.get("text_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_color").toString()));
      }
      // validate the optional field `text_color`
      if (jsonObj.get("text_color") != null && !jsonObj.get("text_color").isJsonNull()) {
        TextColorEnum.validateJsonElement(jsonObj.get("text_color"));
      }
      if ((jsonObj.get("background_color") != null && !jsonObj.get("background_color").isJsonNull()) && !jsonObj.get("background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_color").toString()));
      }
      // validate the optional field `background_color`
      if (jsonObj.get("background_color") != null && !jsonObj.get("background_color").isJsonNull()) {
        BackgroundColorEnum.validateJsonElement(jsonObj.get("background_color"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) {
        JsonArray jsonArraycaption = jsonObj.getAsJsonArray("caption");
        if (jsonArraycaption != null) {
          // ensure the json data is an array
          if (!jsonObj.get("caption").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `caption` to be an array in the JSON string but got `%s`", jsonObj.get("caption").toString()));
          }

          // validate the optional field `caption` (array)
          for (int i = 0; i < jsonArraycaption.size(); i++) {
            RichTextItem.validateJsonElement(jsonArraycaption.get(i));
          };
        }
      }
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        Icon.validateJsonElement(jsonObj.get("icon"));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("page_id") != null && !jsonObj.get("page_id").isJsonNull()) && !jsonObj.get("page_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cells") != null && !jsonObj.get("cells").isJsonNull() && !jsonObj.get("cells").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cells` to be an array in the JSON string but got `%s`", jsonObj.get("cells").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `synced_from`
      if (jsonObj.get("synced_from") != null && !jsonObj.get("synced_from").isJsonNull()) {
        BlockDataSyncedFrom.validateJsonElement(jsonObj.get("synced_from"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        BlockDataFile.validateJsonElement(jsonObj.get("file"));
      }
      // validate the optional field `external`
      if (jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) {
        BlockDataExternal.validateJsonElement(jsonObj.get("external"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockData.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockData>() {
           @Override
           public void write(JsonWriter out, BlockData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlockData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlockData
   * @throws IOException if the JSON string is invalid with respect to BlockData
   */
  public static BlockData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockData.class);
  }

  /**
   * Convert an instance of BlockData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

