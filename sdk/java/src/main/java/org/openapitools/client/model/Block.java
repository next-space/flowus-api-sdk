/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.BlockData;
import org.openapitools.client.model.Parent;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Block
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-02T17:17:19.267825+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class Block {
  /**
   * Gets or Sets _object
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    BLOCK("block");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  @javax.annotation.Nullable
  private ObjectEnum _object;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private Parent parent;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PARAGRAPH("paragraph"),
    
    HEADING_1("heading_1"),
    
    HEADING_2("heading_2"),
    
    HEADING_3("heading_3"),
    
    BULLETED_LIST_ITEM("bulleted_list_item"),
    
    NUMBERED_LIST_ITEM("numbered_list_item"),
    
    TO_DO("to_do"),
    
    QUOTE("quote"),
    
    TOGGLE("toggle"),
    
    CODE("code"),
    
    IMAGE("image"),
    
    FILE("file"),
    
    BOOKMARK("bookmark"),
    
    EMBED("embed"),
    
    CALLOUT("callout"),
    
    EQUATION("equation"),
    
    LINK_TO_PAGE("link_to_page"),
    
    TEMPLATE("template"),
    
    SYNCED_BLOCK("synced_block"),
    
    DIVIDER("divider"),
    
    COLUMN_LIST("column_list"),
    
    COLUMN("column"),
    
    TABLE("table"),
    
    TABLE_ROW("table_row"),
    
    CHILD_PAGE("child_page"),
    
    CHILD_DATABASE("child_database");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  @javax.annotation.Nullable
  private User createdBy;

  public static final String SERIALIZED_NAME_LAST_EDITED_TIME = "last_edited_time";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime lastEditedTime;

  public static final String SERIALIZED_NAME_LAST_EDITED_BY = "last_edited_by";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_BY)
  @javax.annotation.Nullable
  private User lastEditedBy;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  @javax.annotation.Nullable
  private Boolean archived;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "has_children";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  @javax.annotation.Nullable
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nullable
  private BlockData data;

  public Block() {
  }

  public Block _object(@javax.annotation.Nullable ObjectEnum _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nullable
  public ObjectEnum getObject() {
    return _object;
  }

  public void setObject(@javax.annotation.Nullable ObjectEnum _object) {
    this._object = _object;
  }


  public Block id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public Block parent(@javax.annotation.Nullable Parent parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public Parent getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable Parent parent) {
    this.parent = parent;
  }


  public Block type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public Block createdTime(@javax.annotation.Nullable OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(@javax.annotation.Nullable OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public Block createdBy(@javax.annotation.Nullable User createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public User getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(@javax.annotation.Nullable User createdBy) {
    this.createdBy = createdBy;
  }


  public Block lastEditedTime(@javax.annotation.Nullable OffsetDateTime lastEditedTime) {
    this.lastEditedTime = lastEditedTime;
    return this;
  }

  /**
   * Get lastEditedTime
   * @return lastEditedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastEditedTime() {
    return lastEditedTime;
  }

  public void setLastEditedTime(@javax.annotation.Nullable OffsetDateTime lastEditedTime) {
    this.lastEditedTime = lastEditedTime;
  }


  public Block lastEditedBy(@javax.annotation.Nullable User lastEditedBy) {
    this.lastEditedBy = lastEditedBy;
    return this;
  }

  /**
   * Get lastEditedBy
   * @return lastEditedBy
   */
  @javax.annotation.Nullable
  public User getLastEditedBy() {
    return lastEditedBy;
  }

  public void setLastEditedBy(@javax.annotation.Nullable User lastEditedBy) {
    this.lastEditedBy = lastEditedBy;
  }


  public Block archived(@javax.annotation.Nullable Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(@javax.annotation.Nullable Boolean archived) {
    this.archived = archived;
  }


  public Block hasChildren(@javax.annotation.Nullable Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(@javax.annotation.Nullable Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public Block data(@javax.annotation.Nullable BlockData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public BlockData getData() {
    return data;
  }

  public void setData(@javax.annotation.Nullable BlockData data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Block block = (Block) o;
    return Objects.equals(this._object, block._object) &&
        Objects.equals(this.id, block.id) &&
        Objects.equals(this.parent, block.parent) &&
        Objects.equals(this.type, block.type) &&
        Objects.equals(this.createdTime, block.createdTime) &&
        Objects.equals(this.createdBy, block.createdBy) &&
        Objects.equals(this.lastEditedTime, block.lastEditedTime) &&
        Objects.equals(this.lastEditedBy, block.lastEditedBy) &&
        Objects.equals(this.archived, block.archived) &&
        Objects.equals(this.hasChildren, block.hasChildren) &&
        Objects.equals(this.data, block.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_object, id, parent, type, createdTime, createdBy, lastEditedTime, lastEditedBy, archived, hasChildren, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Block {\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastEditedTime: ").append(toIndentedString(lastEditedTime)).append("\n");
    sb.append("    lastEditedBy: ").append(toIndentedString(lastEditedBy)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("object", "id", "parent", "type", "created_time", "created_by", "last_edited_time", "last_edited_by", "archived", "has_children", "data"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Block
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Block.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Block is not found in the empty JSON string", Block.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Block.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Block` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the optional field `object`
      if (jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) {
        ObjectEnum.validateJsonElement(jsonObj.get("object"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        Parent.validateJsonElement(jsonObj.get("parent"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("created_by"));
      }
      // validate the optional field `last_edited_by`
      if (jsonObj.get("last_edited_by") != null && !jsonObj.get("last_edited_by").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("last_edited_by"));
      }
      // validate the optional field `data`
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        BlockData.validateJsonElement(jsonObj.get("data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Block.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Block' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Block> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Block.class));

       return (TypeAdapter<T>) new TypeAdapter<Block>() {
           @Override
           public void write(JsonWriter out, Block value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Block read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Block given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Block
   * @throws IOException if the JSON string is invalid with respect to Block
   */
  public static Block fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Block.class);
  }

  /**
   * Convert an instance of Block to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

