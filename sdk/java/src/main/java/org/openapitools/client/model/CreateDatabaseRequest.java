/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Cover;
import org.openapitools.client.model.Icon;
import org.openapitools.client.model.Parent;
import org.openapitools.client.model.PropertySchema;
import org.openapitools.client.model.RichTextItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDatabaseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-02T17:17:19.267825+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class CreateDatabaseRequest {
  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private Parent parent;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nonnull
  private List<RichTextItem> title = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  @javax.annotation.Nullable
  private Icon icon;

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  @javax.annotation.Nullable
  private Cover cover;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nonnull
  private Map<String, PropertySchema> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_IS_INLINE = "is_inline";
  @SerializedName(SERIALIZED_NAME_IS_INLINE)
  @javax.annotation.Nullable
  private Boolean isInline;

  public CreateDatabaseRequest() {
  }

  public CreateDatabaseRequest parent(@javax.annotation.Nullable Parent parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public Parent getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable Parent parent) {
    this.parent = parent;
  }


  public CreateDatabaseRequest title(@javax.annotation.Nonnull List<RichTextItem> title) {
    this.title = title;
    return this;
  }

  public CreateDatabaseRequest addTitleItem(RichTextItem titleItem) {
    if (this.title == null) {
      this.title = new ArrayList<>();
    }
    this.title.add(titleItem);
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public List<RichTextItem> getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nonnull List<RichTextItem> title) {
    this.title = title;
  }


  public CreateDatabaseRequest icon(@javax.annotation.Nullable Icon icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public Icon getIcon() {
    return icon;
  }

  public void setIcon(@javax.annotation.Nullable Icon icon) {
    this.icon = icon;
  }


  public CreateDatabaseRequest cover(@javax.annotation.Nullable Cover cover) {
    this.cover = cover;
    return this;
  }

  /**
   * Get cover
   * @return cover
   */
  @javax.annotation.Nullable
  public Cover getCover() {
    return cover;
  }

  public void setCover(@javax.annotation.Nullable Cover cover) {
    this.cover = cover;
  }


  public CreateDatabaseRequest properties(@javax.annotation.Nonnull Map<String, PropertySchema> properties) {
    this.properties = properties;
    return this;
  }

  public CreateDatabaseRequest putPropertiesItem(String key, PropertySchema propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nonnull
  public Map<String, PropertySchema> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nonnull Map<String, PropertySchema> properties) {
    this.properties = properties;
  }


  public CreateDatabaseRequest isInline(@javax.annotation.Nullable Boolean isInline) {
    this.isInline = isInline;
    return this;
  }

  /**
   * 是否为内联数据库
   * @return isInline
   */
  @javax.annotation.Nullable
  public Boolean getIsInline() {
    return isInline;
  }

  public void setIsInline(@javax.annotation.Nullable Boolean isInline) {
    this.isInline = isInline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDatabaseRequest createDatabaseRequest = (CreateDatabaseRequest) o;
    return Objects.equals(this.parent, createDatabaseRequest.parent) &&
        Objects.equals(this.title, createDatabaseRequest.title) &&
        Objects.equals(this.icon, createDatabaseRequest.icon) &&
        Objects.equals(this.cover, createDatabaseRequest.cover) &&
        Objects.equals(this.properties, createDatabaseRequest.properties) &&
        Objects.equals(this.isInline, createDatabaseRequest.isInline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parent, title, icon, cover, properties, isInline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDatabaseRequest {\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    isInline: ").append(toIndentedString(isInline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("parent", "title", "icon", "cover", "properties", "is_inline"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("title", "properties"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDatabaseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDatabaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDatabaseRequest is not found in the empty JSON string", CreateDatabaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDatabaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDatabaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDatabaseRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        Parent.validateJsonElement(jsonObj.get("parent"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("title").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be an array in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }

      JsonArray jsonArraytitle = jsonObj.getAsJsonArray("title");
      // validate the required field `title` (array)
      for (int i = 0; i < jsonArraytitle.size(); i++) {
        RichTextItem.validateJsonElement(jsonArraytitle.get(i));
      };
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        Icon.validateJsonElement(jsonObj.get("icon"));
      }
      // validate the optional field `cover`
      if (jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) {
        Cover.validateJsonElement(jsonObj.get("cover"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDatabaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDatabaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDatabaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDatabaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDatabaseRequest>() {
           @Override
           public void write(JsonWriter out, CreateDatabaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDatabaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDatabaseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDatabaseRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDatabaseRequest
   */
  public static CreateDatabaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDatabaseRequest.class);
  }

  /**
   * Convert an instance of CreateDatabaseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

