/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PropertySchemaCheckbox;
import org.openapitools.client.model.PropertySchemaDate;
import org.openapitools.client.model.PropertySchemaEmail;
import org.openapitools.client.model.PropertySchemaFiles;
import org.openapitools.client.model.PropertySchemaFormula;
import org.openapitools.client.model.PropertySchemaFormulaFormula;
import org.openapitools.client.model.PropertySchemaMultiSelect;
import org.openapitools.client.model.PropertySchemaNumber;
import org.openapitools.client.model.PropertySchemaNumberNumber;
import org.openapitools.client.model.PropertySchemaPeople;
import org.openapitools.client.model.PropertySchemaPhoneNumber;
import org.openapitools.client.model.PropertySchemaRelation;
import org.openapitools.client.model.PropertySchemaRelationRelation;
import org.openapitools.client.model.PropertySchemaRichText;
import org.openapitools.client.model.PropertySchemaSelect;
import org.openapitools.client.model.PropertySchemaSelectSelect;
import org.openapitools.client.model.PropertySchemaTitle;
import org.openapitools.client.model.PropertySchemaUrl;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-02T17:17:19.267825+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class PropertySchema extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PropertySchema.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PropertySchema.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PropertySchema' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PropertySchemaTitle> adapterPropertySchemaTitle = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaTitle.class));
            final TypeAdapter<PropertySchemaRichText> adapterPropertySchemaRichText = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaRichText.class));
            final TypeAdapter<PropertySchemaNumber> adapterPropertySchemaNumber = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaNumber.class));
            final TypeAdapter<PropertySchemaSelect> adapterPropertySchemaSelect = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaSelect.class));
            final TypeAdapter<PropertySchemaMultiSelect> adapterPropertySchemaMultiSelect = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaMultiSelect.class));
            final TypeAdapter<PropertySchemaDate> adapterPropertySchemaDate = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaDate.class));
            final TypeAdapter<PropertySchemaPeople> adapterPropertySchemaPeople = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaPeople.class));
            final TypeAdapter<PropertySchemaFiles> adapterPropertySchemaFiles = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaFiles.class));
            final TypeAdapter<PropertySchemaCheckbox> adapterPropertySchemaCheckbox = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaCheckbox.class));
            final TypeAdapter<PropertySchemaUrl> adapterPropertySchemaUrl = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaUrl.class));
            final TypeAdapter<PropertySchemaEmail> adapterPropertySchemaEmail = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaEmail.class));
            final TypeAdapter<PropertySchemaPhoneNumber> adapterPropertySchemaPhoneNumber = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaPhoneNumber.class));
            final TypeAdapter<PropertySchemaFormula> adapterPropertySchemaFormula = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaFormula.class));
            final TypeAdapter<PropertySchemaRelation> adapterPropertySchemaRelation = gson.getDelegateAdapter(this, TypeToken.get(PropertySchemaRelation.class));

            return (TypeAdapter<T>) new TypeAdapter<PropertySchema>() {
                @Override
                public void write(JsonWriter out, PropertySchema value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PropertySchemaTitle`
                    if (value.getActualInstance() instanceof PropertySchemaTitle) {
                        JsonElement element = adapterPropertySchemaTitle.toJsonTree((PropertySchemaTitle)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaRichText`
                    if (value.getActualInstance() instanceof PropertySchemaRichText) {
                        JsonElement element = adapterPropertySchemaRichText.toJsonTree((PropertySchemaRichText)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaNumber`
                    if (value.getActualInstance() instanceof PropertySchemaNumber) {
                        JsonElement element = adapterPropertySchemaNumber.toJsonTree((PropertySchemaNumber)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaSelect`
                    if (value.getActualInstance() instanceof PropertySchemaSelect) {
                        JsonElement element = adapterPropertySchemaSelect.toJsonTree((PropertySchemaSelect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaMultiSelect`
                    if (value.getActualInstance() instanceof PropertySchemaMultiSelect) {
                        JsonElement element = adapterPropertySchemaMultiSelect.toJsonTree((PropertySchemaMultiSelect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaDate`
                    if (value.getActualInstance() instanceof PropertySchemaDate) {
                        JsonElement element = adapterPropertySchemaDate.toJsonTree((PropertySchemaDate)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaPeople`
                    if (value.getActualInstance() instanceof PropertySchemaPeople) {
                        JsonElement element = adapterPropertySchemaPeople.toJsonTree((PropertySchemaPeople)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaFiles`
                    if (value.getActualInstance() instanceof PropertySchemaFiles) {
                        JsonElement element = adapterPropertySchemaFiles.toJsonTree((PropertySchemaFiles)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaCheckbox`
                    if (value.getActualInstance() instanceof PropertySchemaCheckbox) {
                        JsonElement element = adapterPropertySchemaCheckbox.toJsonTree((PropertySchemaCheckbox)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaUrl`
                    if (value.getActualInstance() instanceof PropertySchemaUrl) {
                        JsonElement element = adapterPropertySchemaUrl.toJsonTree((PropertySchemaUrl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaEmail`
                    if (value.getActualInstance() instanceof PropertySchemaEmail) {
                        JsonElement element = adapterPropertySchemaEmail.toJsonTree((PropertySchemaEmail)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaPhoneNumber`
                    if (value.getActualInstance() instanceof PropertySchemaPhoneNumber) {
                        JsonElement element = adapterPropertySchemaPhoneNumber.toJsonTree((PropertySchemaPhoneNumber)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaFormula`
                    if (value.getActualInstance() instanceof PropertySchemaFormula) {
                        JsonElement element = adapterPropertySchemaFormula.toJsonTree((PropertySchemaFormula)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PropertySchemaRelation`
                    if (value.getActualInstance() instanceof PropertySchemaRelation) {
                        JsonElement element = adapterPropertySchemaRelation.toJsonTree((PropertySchemaRelation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: PropertySchemaCheckbox, PropertySchemaDate, PropertySchemaEmail, PropertySchemaFiles, PropertySchemaFormula, PropertySchemaMultiSelect, PropertySchemaNumber, PropertySchemaPeople, PropertySchemaPhoneNumber, PropertySchemaRelation, PropertySchemaRichText, PropertySchemaSelect, PropertySchemaTitle, PropertySchemaUrl");
                }

                @Override
                public PropertySchema read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PropertySchemaTitle
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaTitle.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaTitle;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaTitle failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaTitle'", e);
                    }
                    // deserialize PropertySchemaRichText
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaRichText.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaRichText;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaRichText failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaRichText'", e);
                    }
                    // deserialize PropertySchemaNumber
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaNumber.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaNumber;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaNumber failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaNumber'", e);
                    }
                    // deserialize PropertySchemaSelect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaSelect.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaSelect;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaSelect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaSelect'", e);
                    }
                    // deserialize PropertySchemaMultiSelect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaMultiSelect.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaMultiSelect;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaMultiSelect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaMultiSelect'", e);
                    }
                    // deserialize PropertySchemaDate
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaDate.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaDate;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaDate failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaDate'", e);
                    }
                    // deserialize PropertySchemaPeople
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaPeople.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaPeople;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaPeople failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaPeople'", e);
                    }
                    // deserialize PropertySchemaFiles
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaFiles.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaFiles;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaFiles failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaFiles'", e);
                    }
                    // deserialize PropertySchemaCheckbox
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaCheckbox.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaCheckbox;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaCheckbox failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaCheckbox'", e);
                    }
                    // deserialize PropertySchemaUrl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaUrl.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaUrl;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaUrl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaUrl'", e);
                    }
                    // deserialize PropertySchemaEmail
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaEmail.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaEmail;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaEmail failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaEmail'", e);
                    }
                    // deserialize PropertySchemaPhoneNumber
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaPhoneNumber.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaPhoneNumber;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaPhoneNumber failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaPhoneNumber'", e);
                    }
                    // deserialize PropertySchemaFormula
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaFormula.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaFormula;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaFormula failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaFormula'", e);
                    }
                    // deserialize PropertySchemaRelation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySchemaRelation.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySchemaRelation;
                        PropertySchema ret = new PropertySchema();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySchemaRelation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySchemaRelation'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for PropertySchema: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PropertySchema() {
        super("anyOf", Boolean.FALSE);
    }

    public PropertySchema(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PropertySchemaTitle", PropertySchemaTitle.class);
        schemas.put("PropertySchemaRichText", PropertySchemaRichText.class);
        schemas.put("PropertySchemaNumber", PropertySchemaNumber.class);
        schemas.put("PropertySchemaSelect", PropertySchemaSelect.class);
        schemas.put("PropertySchemaMultiSelect", PropertySchemaMultiSelect.class);
        schemas.put("PropertySchemaDate", PropertySchemaDate.class);
        schemas.put("PropertySchemaPeople", PropertySchemaPeople.class);
        schemas.put("PropertySchemaFiles", PropertySchemaFiles.class);
        schemas.put("PropertySchemaCheckbox", PropertySchemaCheckbox.class);
        schemas.put("PropertySchemaUrl", PropertySchemaUrl.class);
        schemas.put("PropertySchemaEmail", PropertySchemaEmail.class);
        schemas.put("PropertySchemaPhoneNumber", PropertySchemaPhoneNumber.class);
        schemas.put("PropertySchemaFormula", PropertySchemaFormula.class);
        schemas.put("PropertySchemaRelation", PropertySchemaRelation.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PropertySchema.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * PropertySchemaCheckbox, PropertySchemaDate, PropertySchemaEmail, PropertySchemaFiles, PropertySchemaFormula, PropertySchemaMultiSelect, PropertySchemaNumber, PropertySchemaPeople, PropertySchemaPhoneNumber, PropertySchemaRelation, PropertySchemaRichText, PropertySchemaSelect, PropertySchemaTitle, PropertySchemaUrl
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PropertySchemaTitle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaRichText) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaNumber) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaSelect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaMultiSelect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaDate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaPeople) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaFiles) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaCheckbox) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaUrl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaEmail) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaPhoneNumber) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaFormula) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PropertySchemaRelation) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PropertySchemaCheckbox, PropertySchemaDate, PropertySchemaEmail, PropertySchemaFiles, PropertySchemaFormula, PropertySchemaMultiSelect, PropertySchemaNumber, PropertySchemaPeople, PropertySchemaPhoneNumber, PropertySchemaRelation, PropertySchemaRichText, PropertySchemaSelect, PropertySchemaTitle, PropertySchemaUrl");
    }

    /**
     * Get the actual instance, which can be the following:
     * PropertySchemaCheckbox, PropertySchemaDate, PropertySchemaEmail, PropertySchemaFiles, PropertySchemaFormula, PropertySchemaMultiSelect, PropertySchemaNumber, PropertySchemaPeople, PropertySchemaPhoneNumber, PropertySchemaRelation, PropertySchemaRichText, PropertySchemaSelect, PropertySchemaTitle, PropertySchemaUrl
     *
     * @return The actual instance (PropertySchemaCheckbox, PropertySchemaDate, PropertySchemaEmail, PropertySchemaFiles, PropertySchemaFormula, PropertySchemaMultiSelect, PropertySchemaNumber, PropertySchemaPeople, PropertySchemaPhoneNumber, PropertySchemaRelation, PropertySchemaRichText, PropertySchemaSelect, PropertySchemaTitle, PropertySchemaUrl)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaTitle`. If the actual instance is not `PropertySchemaTitle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaTitle`
     * @throws ClassCastException if the instance is not `PropertySchemaTitle`
     */
    public PropertySchemaTitle getPropertySchemaTitle() throws ClassCastException {
        return (PropertySchemaTitle)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaRichText`. If the actual instance is not `PropertySchemaRichText`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaRichText`
     * @throws ClassCastException if the instance is not `PropertySchemaRichText`
     */
    public PropertySchemaRichText getPropertySchemaRichText() throws ClassCastException {
        return (PropertySchemaRichText)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaNumber`. If the actual instance is not `PropertySchemaNumber`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaNumber`
     * @throws ClassCastException if the instance is not `PropertySchemaNumber`
     */
    public PropertySchemaNumber getPropertySchemaNumber() throws ClassCastException {
        return (PropertySchemaNumber)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaSelect`. If the actual instance is not `PropertySchemaSelect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaSelect`
     * @throws ClassCastException if the instance is not `PropertySchemaSelect`
     */
    public PropertySchemaSelect getPropertySchemaSelect() throws ClassCastException {
        return (PropertySchemaSelect)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaMultiSelect`. If the actual instance is not `PropertySchemaMultiSelect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaMultiSelect`
     * @throws ClassCastException if the instance is not `PropertySchemaMultiSelect`
     */
    public PropertySchemaMultiSelect getPropertySchemaMultiSelect() throws ClassCastException {
        return (PropertySchemaMultiSelect)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaDate`. If the actual instance is not `PropertySchemaDate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaDate`
     * @throws ClassCastException if the instance is not `PropertySchemaDate`
     */
    public PropertySchemaDate getPropertySchemaDate() throws ClassCastException {
        return (PropertySchemaDate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaPeople`. If the actual instance is not `PropertySchemaPeople`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaPeople`
     * @throws ClassCastException if the instance is not `PropertySchemaPeople`
     */
    public PropertySchemaPeople getPropertySchemaPeople() throws ClassCastException {
        return (PropertySchemaPeople)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaFiles`. If the actual instance is not `PropertySchemaFiles`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaFiles`
     * @throws ClassCastException if the instance is not `PropertySchemaFiles`
     */
    public PropertySchemaFiles getPropertySchemaFiles() throws ClassCastException {
        return (PropertySchemaFiles)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaCheckbox`. If the actual instance is not `PropertySchemaCheckbox`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaCheckbox`
     * @throws ClassCastException if the instance is not `PropertySchemaCheckbox`
     */
    public PropertySchemaCheckbox getPropertySchemaCheckbox() throws ClassCastException {
        return (PropertySchemaCheckbox)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaUrl`. If the actual instance is not `PropertySchemaUrl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaUrl`
     * @throws ClassCastException if the instance is not `PropertySchemaUrl`
     */
    public PropertySchemaUrl getPropertySchemaUrl() throws ClassCastException {
        return (PropertySchemaUrl)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaEmail`. If the actual instance is not `PropertySchemaEmail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaEmail`
     * @throws ClassCastException if the instance is not `PropertySchemaEmail`
     */
    public PropertySchemaEmail getPropertySchemaEmail() throws ClassCastException {
        return (PropertySchemaEmail)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaPhoneNumber`. If the actual instance is not `PropertySchemaPhoneNumber`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaPhoneNumber`
     * @throws ClassCastException if the instance is not `PropertySchemaPhoneNumber`
     */
    public PropertySchemaPhoneNumber getPropertySchemaPhoneNumber() throws ClassCastException {
        return (PropertySchemaPhoneNumber)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaFormula`. If the actual instance is not `PropertySchemaFormula`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaFormula`
     * @throws ClassCastException if the instance is not `PropertySchemaFormula`
     */
    public PropertySchemaFormula getPropertySchemaFormula() throws ClassCastException {
        return (PropertySchemaFormula)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySchemaRelation`. If the actual instance is not `PropertySchemaRelation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySchemaRelation`
     * @throws ClassCastException if the instance is not `PropertySchemaRelation`
     */
    public PropertySchemaRelation getPropertySchemaRelation() throws ClassCastException {
        return (PropertySchemaRelation)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PropertySchema
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PropertySchemaTitle
        try {
            PropertySchemaTitle.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaTitle failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaRichText
        try {
            PropertySchemaRichText.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaRichText failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaNumber
        try {
            PropertySchemaNumber.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaNumber failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaSelect
        try {
            PropertySchemaSelect.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaSelect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaMultiSelect
        try {
            PropertySchemaMultiSelect.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaMultiSelect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaDate
        try {
            PropertySchemaDate.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaDate failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaPeople
        try {
            PropertySchemaPeople.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaPeople failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaFiles
        try {
            PropertySchemaFiles.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaFiles failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaCheckbox
        try {
            PropertySchemaCheckbox.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaCheckbox failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaUrl
        try {
            PropertySchemaUrl.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaUrl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaEmail
        try {
            PropertySchemaEmail.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaEmail failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaPhoneNumber
        try {
            PropertySchemaPhoneNumber.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaPhoneNumber failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaFormula
        try {
            PropertySchemaFormula.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaFormula failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PropertySchemaRelation
        try {
            PropertySchemaRelation.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySchemaRelation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for PropertySchema with anyOf schemas: PropertySchemaCheckbox, PropertySchemaDate, PropertySchemaEmail, PropertySchemaFiles, PropertySchemaFormula, PropertySchemaMultiSelect, PropertySchemaNumber, PropertySchemaPeople, PropertySchemaPhoneNumber, PropertySchemaRelation, PropertySchemaRichText, PropertySchemaSelect, PropertySchemaTitle, PropertySchemaUrl. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of PropertySchema given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PropertySchema
     * @throws IOException if the JSON string is invalid with respect to PropertySchema
     */
    public static PropertySchema fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PropertySchema.class);
    }

    /**
     * Convert an instance of PropertySchema to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

