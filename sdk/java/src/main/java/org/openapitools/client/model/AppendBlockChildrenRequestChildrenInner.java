/*
 * FlowUs API
 * FlowUs Developer API - 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BlockData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppendBlockChildrenRequestChildrenInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-02T17:17:19.267825+08:00[Asia/Shanghai]", comments = "Generator version: 7.14.0")
public class AppendBlockChildrenRequestChildrenInner {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PARAGRAPH("paragraph"),
    
    HEADING_1("heading_1"),
    
    HEADING_2("heading_2"),
    
    HEADING_3("heading_3"),
    
    BULLETED_LIST_ITEM("bulleted_list_item"),
    
    NUMBERED_LIST_ITEM("numbered_list_item"),
    
    TO_DO("to_do"),
    
    QUOTE("quote"),
    
    TOGGLE("toggle"),
    
    CODE("code"),
    
    IMAGE("image"),
    
    FILE("file"),
    
    BOOKMARK("bookmark"),
    
    EMBED("embed"),
    
    CALLOUT("callout"),
    
    EQUATION("equation"),
    
    LINK_TO_PAGE("link_to_page"),
    
    TEMPLATE("template"),
    
    SYNCED_BLOCK("synced_block"),
    
    DIVIDER("divider"),
    
    COLUMN_LIST("column_list"),
    
    COLUMN("column"),
    
    TABLE("table"),
    
    TABLE_ROW("table_row"),
    
    CHILD_PAGE("child_page"),
    
    CHILD_DATABASE("child_database");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nonnull
  private BlockData data;

  public AppendBlockChildrenRequestChildrenInner() {
  }

  public AppendBlockChildrenRequestChildrenInner type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public AppendBlockChildrenRequestChildrenInner data(@javax.annotation.Nonnull BlockData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public BlockData getData() {
    return data;
  }

  public void setData(@javax.annotation.Nonnull BlockData data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendBlockChildrenRequestChildrenInner appendBlockChildrenRequestChildrenInner = (AppendBlockChildrenRequestChildrenInner) o;
    return Objects.equals(this.type, appendBlockChildrenRequestChildrenInner.type) &&
        Objects.equals(this.data, appendBlockChildrenRequestChildrenInner.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendBlockChildrenRequestChildrenInner {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("type", "data"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("type", "data"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppendBlockChildrenRequestChildrenInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendBlockChildrenRequestChildrenInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendBlockChildrenRequestChildrenInner is not found in the empty JSON string", AppendBlockChildrenRequestChildrenInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendBlockChildrenRequestChildrenInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendBlockChildrenRequestChildrenInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppendBlockChildrenRequestChildrenInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the required field `data`
      BlockData.validateJsonElement(jsonObj.get("data"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendBlockChildrenRequestChildrenInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendBlockChildrenRequestChildrenInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendBlockChildrenRequestChildrenInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendBlockChildrenRequestChildrenInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendBlockChildrenRequestChildrenInner>() {
           @Override
           public void write(JsonWriter out, AppendBlockChildrenRequestChildrenInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendBlockChildrenRequestChildrenInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppendBlockChildrenRequestChildrenInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppendBlockChildrenRequestChildrenInner
   * @throws IOException if the JSON string is invalid with respect to AppendBlockChildrenRequestChildrenInner
   */
  public static AppendBlockChildrenRequestChildrenInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendBlockChildrenRequestChildrenInner.class);
  }

  /**
   * Convert an instance of AppendBlockChildrenRequestChildrenInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

