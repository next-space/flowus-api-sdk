/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserMePerson } from './UserMePerson';
import {
    UserMePersonFromJSON,
    UserMePersonFromJSONTyped,
    UserMePersonToJSON,
    UserMePersonToJSONTyped,
} from './UserMePerson';

/**
 * 
 * @export
 * @interface UserMe
 */
export interface UserMe {
    /**
     * 
     * @type {string}
     * @memberof UserMe
     */
    object?: UserMeObjectEnum;
    /**
     * 用户唯一标识符
     * @type {string}
     * @memberof UserMe
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserMe
     */
    type?: UserMeTypeEnum;
    /**
     * 
     * @type {UserMePerson}
     * @memberof UserMe
     */
    person?: UserMePerson;
    /**
     * 用户显示名称
     * @type {string}
     * @memberof UserMe
     */
    name?: string;
    /**
     * 用户头像URL
     * @type {string}
     * @memberof UserMe
     */
    avatar_url?: string;
}


/**
 * @export
 */
export const UserMeObjectEnum = {
    User: 'user'
} as const;
export type UserMeObjectEnum = typeof UserMeObjectEnum[keyof typeof UserMeObjectEnum];

/**
 * @export
 */
export const UserMeTypeEnum = {
    Person: 'person'
} as const;
export type UserMeTypeEnum = typeof UserMeTypeEnum[keyof typeof UserMeTypeEnum];


/**
 * Check if a given object implements the UserMe interface.
 */
export function instanceOfUserMe(value: object): value is UserMe {
    return true;
}

export function UserMeFromJSON(json: any): UserMe {
    return UserMeFromJSONTyped(json, false);
}

export function UserMeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserMe {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'] == null ? undefined : json['object'],
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'person': json['person'] == null ? undefined : UserMePersonFromJSON(json['person']),
        'name': json['name'] == null ? undefined : json['name'],
        'avatar_url': json['avatar_url'] == null ? undefined : json['avatar_url'],
    };
}

export function UserMeToJSON(json: any): UserMe {
    return UserMeToJSONTyped(json, false);
}

export function UserMeToJSONTyped(value?: UserMe | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'id': value['id'],
        'type': value['type'],
        'person': UserMePersonToJSON(value['person']),
        'name': value['name'],
        'avatar_url': value['avatar_url'],
    };
}

