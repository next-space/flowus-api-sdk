/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    object?: ModelErrorObjectEnum;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    code?: ModelErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
}


/**
 * @export
 */
export const ModelErrorObjectEnum = {
    Error: 'error'
} as const;
export type ModelErrorObjectEnum = typeof ModelErrorObjectEnum[keyof typeof ModelErrorObjectEnum];

/**
 * @export
 */
export const ModelErrorCodeEnum = {
    ValidationError: 'validation_error',
    Unauthorized: 'unauthorized',
    Forbidden: 'forbidden',
    NotFound: 'not_found',
    RateLimit: 'rate_limit',
    InternalError: 'internal_error'
} as const;
export type ModelErrorCodeEnum = typeof ModelErrorCodeEnum[keyof typeof ModelErrorCodeEnum];


/**
 * Check if a given object implements the ModelError interface.
 */
export function instanceOfModelError(value: object): value is ModelError {
    return true;
}

export function ModelErrorFromJSON(json: any): ModelError {
    return ModelErrorFromJSONTyped(json, false);
}

export function ModelErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelError {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'] == null ? undefined : json['object'],
        'status': json['status'] == null ? undefined : json['status'],
        'code': json['code'] == null ? undefined : json['code'],
        'message': json['message'] == null ? undefined : json['message'],
    };
}

export function ModelErrorToJSON(json: any): ModelError {
    return ModelErrorToJSONTyped(json, false);
}

export function ModelErrorToJSONTyped(value?: ModelError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'status': value['status'],
        'code': value['code'],
        'message': value['message'],
    };
}

