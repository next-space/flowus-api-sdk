/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlockDataExternal } from './BlockDataExternal';
import {
    BlockDataExternalFromJSON,
    BlockDataExternalFromJSONTyped,
    BlockDataExternalToJSON,
    BlockDataExternalToJSONTyped,
} from './BlockDataExternal';
import type { RichTextItem } from './RichTextItem';
import {
    RichTextItemFromJSON,
    RichTextItemFromJSONTyped,
    RichTextItemToJSON,
    RichTextItemToJSONTyped,
} from './RichTextItem';
import type { BlockDataFile } from './BlockDataFile';
import {
    BlockDataFileFromJSON,
    BlockDataFileFromJSONTyped,
    BlockDataFileToJSON,
    BlockDataFileToJSONTyped,
} from './BlockDataFile';
import type { BlockDataSyncedFrom } from './BlockDataSyncedFrom';
import {
    BlockDataSyncedFromFromJSON,
    BlockDataSyncedFromFromJSONTyped,
    BlockDataSyncedFromToJSON,
    BlockDataSyncedFromToJSONTyped,
} from './BlockDataSyncedFrom';
import type { Icon } from './Icon';
import {
    IconFromJSON,
    IconFromJSONTyped,
    IconToJSON,
    IconToJSONTyped,
} from './Icon';

/**
 * 块类型特定的数据内容
 * @export
 * @interface BlockData
 */
export interface BlockData {
    /**
     * 富文本内容
     * @type {Array<RichTextItem>}
     * @memberof BlockData
     */
    rich_text?: Array<RichTextItem>;
    /**
     * 文本颜色
     * @type {string}
     * @memberof BlockData
     */
    text_color?: BlockDataTextColorEnum;
    /**
     * 背景颜色
     * @type {string}
     * @memberof BlockData
     */
    background_color?: BlockDataBackgroundColorEnum;
    /**
     * 待办事项是否完成
     * @type {boolean}
     * @memberof BlockData
     */
    checked?: boolean;
    /**
     * 代码块语言
     * @type {string}
     * @memberof BlockData
     */
    language?: string;
    /**
     * 链接地址
     * @type {string}
     * @memberof BlockData
     */
    url?: string;
    /**
     * 说明文字
     * @type {Array<RichTextItem>}
     * @memberof BlockData
     */
    caption?: Array<RichTextItem>;
    /**
     * 图标
     * @type {Icon}
     * @memberof BlockData
     */
    icon?: Icon;
    /**
     * 数学公式表达式
     * @type {string}
     * @memberof BlockData
     */
    expression?: string;
    /**
     * 页面引用ID
     * @type {string}
     * @memberof BlockData
     */
    page_id?: string;
    /**
     * 表格列数
     * @type {number}
     * @memberof BlockData
     */
    table_width?: number;
    /**
     * 是否有列标题
     * @type {boolean}
     * @memberof BlockData
     */
    has_column_header?: boolean;
    /**
     * 是否有行标题
     * @type {boolean}
     * @memberof BlockData
     */
    has_row_header?: boolean;
    /**
     * 表格单元格内容
     * @type {Array<Array<RichTextItem>>}
     * @memberof BlockData
     */
    cells?: Array<Array<RichTextItem>>;
    /**
     * 子页面或子数据库标题
     * @type {string}
     * @memberof BlockData
     */
    title?: string;
    /**
     * 
     * @type {BlockDataSyncedFrom}
     * @memberof BlockData
     */
    synced_from?: BlockDataSyncedFrom;
    /**
     * 
     * @type {BlockDataFile}
     * @memberof BlockData
     */
    file?: BlockDataFile;
    /**
     * 
     * @type {BlockDataExternal}
     * @memberof BlockData
     */
    external?: BlockDataExternal;
}


/**
 * @export
 */
export const BlockDataTextColorEnum = {
    Default: 'default',
    Gray: 'gray',
    Brown: 'brown',
    Orange: 'orange',
    Yellow: 'yellow',
    Green: 'green',
    Blue: 'blue',
    Purple: 'purple',
    Pink: 'pink',
    Red: 'red'
} as const;
export type BlockDataTextColorEnum = typeof BlockDataTextColorEnum[keyof typeof BlockDataTextColorEnum];

/**
 * @export
 */
export const BlockDataBackgroundColorEnum = {
    Default: 'default',
    Gray: 'gray',
    Brown: 'brown',
    Orange: 'orange',
    Yellow: 'yellow',
    Green: 'green',
    Blue: 'blue',
    Purple: 'purple',
    Pink: 'pink',
    Red: 'red'
} as const;
export type BlockDataBackgroundColorEnum = typeof BlockDataBackgroundColorEnum[keyof typeof BlockDataBackgroundColorEnum];


/**
 * Check if a given object implements the BlockData interface.
 */
export function instanceOfBlockData(value: object): value is BlockData {
    return true;
}

export function BlockDataFromJSON(json: any): BlockData {
    return BlockDataFromJSONTyped(json, false);
}

export function BlockDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockData {
    if (json == null) {
        return json;
    }
    return {
        
        'rich_text': json['rich_text'] == null ? undefined : ((json['rich_text'] as Array<any>).map(RichTextItemFromJSON)),
        'text_color': json['text_color'] == null ? undefined : json['text_color'],
        'background_color': json['background_color'] == null ? undefined : json['background_color'],
        'checked': json['checked'] == null ? undefined : json['checked'],
        'language': json['language'] == null ? undefined : json['language'],
        'url': json['url'] == null ? undefined : json['url'],
        'caption': json['caption'] == null ? undefined : ((json['caption'] as Array<any>).map(RichTextItemFromJSON)),
        'icon': json['icon'] == null ? undefined : IconFromJSON(json['icon']),
        'expression': json['expression'] == null ? undefined : json['expression'],
        'page_id': json['page_id'] == null ? undefined : json['page_id'],
        'table_width': json['table_width'] == null ? undefined : json['table_width'],
        'has_column_header': json['has_column_header'] == null ? undefined : json['has_column_header'],
        'has_row_header': json['has_row_header'] == null ? undefined : json['has_row_header'],
        'cells': json['cells'] == null ? undefined : json['cells'],
        'title': json['title'] == null ? undefined : json['title'],
        'synced_from': json['synced_from'] == null ? undefined : BlockDataSyncedFromFromJSON(json['synced_from']),
        'file': json['file'] == null ? undefined : BlockDataFileFromJSON(json['file']),
        'external': json['external'] == null ? undefined : BlockDataExternalFromJSON(json['external']),
    };
}

export function BlockDataToJSON(json: any): BlockData {
    return BlockDataToJSONTyped(json, false);
}

export function BlockDataToJSONTyped(value?: BlockData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'rich_text': value['rich_text'] == null ? undefined : ((value['rich_text'] as Array<any>).map(RichTextItemToJSON)),
        'text_color': value['text_color'],
        'background_color': value['background_color'],
        'checked': value['checked'],
        'language': value['language'],
        'url': value['url'],
        'caption': value['caption'] == null ? undefined : ((value['caption'] as Array<any>).map(RichTextItemToJSON)),
        'icon': IconToJSON(value['icon']),
        'expression': value['expression'],
        'page_id': value['page_id'],
        'table_width': value['table_width'],
        'has_column_header': value['has_column_header'],
        'has_row_header': value['has_row_header'],
        'cells': value['cells'],
        'title': value['title'],
        'synced_from': BlockDataSyncedFromToJSON(value['synced_from']),
        'file': BlockDataFileToJSON(value['file']),
        'external': BlockDataExternalToJSON(value['external']),
    };
}

