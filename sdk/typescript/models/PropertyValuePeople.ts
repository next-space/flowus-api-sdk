/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyValuePeoplePeopleInner } from './PropertyValuePeoplePeopleInner';
import {
    PropertyValuePeoplePeopleInnerFromJSON,
    PropertyValuePeoplePeopleInnerFromJSONTyped,
    PropertyValuePeoplePeopleInnerToJSON,
    PropertyValuePeoplePeopleInnerToJSONTyped,
} from './PropertyValuePeoplePeopleInner';

/**
 * 
 * @export
 * @interface PropertyValuePeople
 */
export interface PropertyValuePeople {
    /**
     * 
     * @type {string}
     * @memberof PropertyValuePeople
     */
    id?: string;
    /**
     * 
     * @type {any}
     * @memberof PropertyValuePeople
     */
    type?: any | null;
    /**
     * 
     * @type {Array<PropertyValuePeoplePeopleInner>}
     * @memberof PropertyValuePeople
     */
    people?: Array<PropertyValuePeoplePeopleInner>;
}

/**
 * Check if a given object implements the PropertyValuePeople interface.
 */
export function instanceOfPropertyValuePeople(value: object): value is PropertyValuePeople {
    return true;
}

export function PropertyValuePeopleFromJSON(json: any): PropertyValuePeople {
    return PropertyValuePeopleFromJSONTyped(json, false);
}

export function PropertyValuePeopleFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyValuePeople {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'people': json['people'] == null ? undefined : ((json['people'] as Array<any>).map(PropertyValuePeoplePeopleInnerFromJSON)),
    };
}

export function PropertyValuePeopleToJSON(json: any): PropertyValuePeople {
    return PropertyValuePeopleToJSONTyped(json, false);
}

export function PropertyValuePeopleToJSONTyped(value?: PropertyValuePeople | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'people': value['people'] == null ? undefined : ((value['people'] as Array<any>).map(PropertyValuePeoplePeopleInnerToJSON)),
    };
}

