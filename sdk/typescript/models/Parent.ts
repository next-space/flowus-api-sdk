/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ParentBlockId } from './ParentBlockId';
import {
    instanceOfParentBlockId,
    ParentBlockIdFromJSON,
    ParentBlockIdFromJSONTyped,
    ParentBlockIdToJSON,
} from './ParentBlockId';
import type { ParentDatabaseId } from './ParentDatabaseId';
import {
    instanceOfParentDatabaseId,
    ParentDatabaseIdFromJSON,
    ParentDatabaseIdFromJSONTyped,
    ParentDatabaseIdToJSON,
} from './ParentDatabaseId';
import type { ParentPageId } from './ParentPageId';
import {
    instanceOfParentPageId,
    ParentPageIdFromJSON,
    ParentPageIdFromJSONTyped,
    ParentPageIdToJSON,
} from './ParentPageId';
import type { ParentSpaceId } from './ParentSpaceId';
import {
    instanceOfParentSpaceId,
    ParentSpaceIdFromJSON,
    ParentSpaceIdFromJSONTyped,
    ParentSpaceIdToJSON,
} from './ParentSpaceId';

/**
 * @type Parent
 * 
 * @export
 */
export type Parent = ParentBlockId | ParentDatabaseId | ParentPageId | ParentSpaceId;

export function ParentFromJSON(json: any): Parent {
    return ParentFromJSONTyped(json, false);
}

export function ParentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Parent {
    if (json == null) {
        return json;
    }
    if (typeof json !== 'object') {
        return json;
    }
    if (instanceOfParentBlockId(json)) {
        return ParentBlockIdFromJSONTyped(json, true);
    }
    if (instanceOfParentDatabaseId(json)) {
        return ParentDatabaseIdFromJSONTyped(json, true);
    }
    if (instanceOfParentPageId(json)) {
        return ParentPageIdFromJSONTyped(json, true);
    }
    if (instanceOfParentSpaceId(json)) {
        return ParentSpaceIdFromJSONTyped(json, true);
    }

    return {} as any;
}

export function ParentToJSON(json: any): any {
    return ParentToJSONTyped(json, false);
}

export function ParentToJSONTyped(value?: Parent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (typeof value !== 'object') {
        return value;
    }
    if (instanceOfParentBlockId(value)) {
        return ParentBlockIdToJSON(value as ParentBlockId);
    }
    if (instanceOfParentDatabaseId(value)) {
        return ParentDatabaseIdToJSON(value as ParentDatabaseId);
    }
    if (instanceOfParentPageId(value)) {
        return ParentPageIdToJSON(value as ParentPageId);
    }
    if (instanceOfParentSpaceId(value)) {
        return ParentSpaceIdToJSON(value as ParentSpaceId);
    }

    return {};
}

