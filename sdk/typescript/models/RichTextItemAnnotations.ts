/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RichTextItemAnnotations
 */
export interface RichTextItemAnnotations {
    /**
     * 
     * @type {boolean}
     * @memberof RichTextItemAnnotations
     */
    bold?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RichTextItemAnnotations
     */
    italic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RichTextItemAnnotations
     */
    strikethrough?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RichTextItemAnnotations
     */
    underline?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RichTextItemAnnotations
     */
    code?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RichTextItemAnnotations
     */
    color?: RichTextItemAnnotationsColorEnum;
}


/**
 * @export
 */
export const RichTextItemAnnotationsColorEnum = {
    Default: 'default',
    Gray: 'gray',
    Brown: 'brown',
    Orange: 'orange',
    Yellow: 'yellow',
    Green: 'green',
    Blue: 'blue',
    Purple: 'purple',
    Pink: 'pink',
    Red: 'red'
} as const;
export type RichTextItemAnnotationsColorEnum = typeof RichTextItemAnnotationsColorEnum[keyof typeof RichTextItemAnnotationsColorEnum];


/**
 * Check if a given object implements the RichTextItemAnnotations interface.
 */
export function instanceOfRichTextItemAnnotations(value: object): value is RichTextItemAnnotations {
    return true;
}

export function RichTextItemAnnotationsFromJSON(json: any): RichTextItemAnnotations {
    return RichTextItemAnnotationsFromJSONTyped(json, false);
}

export function RichTextItemAnnotationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RichTextItemAnnotations {
    if (json == null) {
        return json;
    }
    return {
        
        'bold': json['bold'] == null ? undefined : json['bold'],
        'italic': json['italic'] == null ? undefined : json['italic'],
        'strikethrough': json['strikethrough'] == null ? undefined : json['strikethrough'],
        'underline': json['underline'] == null ? undefined : json['underline'],
        'code': json['code'] == null ? undefined : json['code'],
        'color': json['color'] == null ? undefined : json['color'],
    };
}

export function RichTextItemAnnotationsToJSON(json: any): RichTextItemAnnotations {
    return RichTextItemAnnotationsToJSONTyped(json, false);
}

export function RichTextItemAnnotationsToJSONTyped(value?: RichTextItemAnnotations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bold': value['bold'],
        'italic': value['italic'],
        'strikethrough': value['strikethrough'],
        'underline': value['underline'],
        'code': value['code'],
        'color': value['color'],
    };
}

