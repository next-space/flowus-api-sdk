/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyValueFilesFilesInner } from './PropertyValueFilesFilesInner';
import {
    PropertyValueFilesFilesInnerFromJSON,
    PropertyValueFilesFilesInnerFromJSONTyped,
    PropertyValueFilesFilesInnerToJSON,
    PropertyValueFilesFilesInnerToJSONTyped,
} from './PropertyValueFilesFilesInner';

/**
 * 
 * @export
 * @interface PropertyValueFiles
 */
export interface PropertyValueFiles {
    /**
     * 
     * @type {string}
     * @memberof PropertyValueFiles
     */
    id?: string;
    /**
     * 
     * @type {any}
     * @memberof PropertyValueFiles
     */
    type: any | null;
    /**
     * 
     * @type {Array<PropertyValueFilesFilesInner>}
     * @memberof PropertyValueFiles
     */
    files: Array<PropertyValueFilesFilesInner>;
}

/**
 * Check if a given object implements the PropertyValueFiles interface.
 */
export function instanceOfPropertyValueFiles(value: object): value is PropertyValueFiles {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('files' in value) || value['files'] === undefined) return false;
    return true;
}

export function PropertyValueFilesFromJSON(json: any): PropertyValueFiles {
    return PropertyValueFilesFromJSONTyped(json, false);
}

export function PropertyValueFilesFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyValueFiles {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'],
        'files': ((json['files'] as Array<any>).map(PropertyValueFilesFilesInnerFromJSON)),
    };
}

export function PropertyValueFilesToJSON(json: any): PropertyValueFiles {
    return PropertyValueFilesToJSONTyped(json, false);
}

export function PropertyValueFilesToJSONTyped(value?: PropertyValueFiles | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'files': ((value['files'] as Array<any>).map(PropertyValueFilesFilesInnerToJSON)),
    };
}

