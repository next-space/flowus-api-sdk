/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Cover } from './Cover';
import {
    CoverFromJSON,
    CoverFromJSONTyped,
    CoverToJSON,
    CoverToJSONTyped,
} from './Cover';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Parent } from './Parent';
import {
    ParentFromJSON,
    ParentFromJSONTyped,
    ParentToJSON,
    ParentToJSONTyped,
} from './Parent';
import type { PropertySchema } from './PropertySchema';
import {
    PropertySchemaFromJSON,
    PropertySchemaFromJSONTyped,
    PropertySchemaToJSON,
    PropertySchemaToJSONTyped,
} from './PropertySchema';
import type { RichTextItem } from './RichTextItem';
import {
    RichTextItemFromJSON,
    RichTextItemFromJSONTyped,
    RichTextItemToJSON,
    RichTextItemToJSONTyped,
} from './RichTextItem';
import type { Icon } from './Icon';
import {
    IconFromJSON,
    IconFromJSONTyped,
    IconToJSON,
    IconToJSONTyped,
} from './Icon';

/**
 * 
 * @export
 * @interface Database
 */
export interface Database {
    /**
     * 
     * @type {string}
     * @memberof Database
     */
    object?: DatabaseObjectEnum;
    /**
     * 
     * @type {string}
     * @memberof Database
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Database
     */
    created_time?: Date;
    /**
     * 
     * @type {User}
     * @memberof Database
     */
    created_by?: User;
    /**
     * 
     * @type {Date}
     * @memberof Database
     */
    last_edited_time?: Date;
    /**
     * 
     * @type {User}
     * @memberof Database
     */
    last_edited_by?: User;
    /**
     * 
     * @type {Array<RichTextItem>}
     * @memberof Database
     */
    title?: Array<RichTextItem>;
    /**
     * 
     * @type {Icon}
     * @memberof Database
     */
    icon?: Icon;
    /**
     * 
     * @type {Cover}
     * @memberof Database
     */
    cover?: Cover;
    /**
     * 
     * @type {{ [key: string]: PropertySchema; }}
     * @memberof Database
     */
    properties?: { [key: string]: PropertySchema; };
    /**
     * 
     * @type {Parent}
     * @memberof Database
     */
    parent?: Parent;
    /**
     * 
     * @type {string}
     * @memberof Database
     */
    url?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Database
     */
    archived?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Database
     */
    is_inline?: boolean;
}


/**
 * @export
 */
export const DatabaseObjectEnum = {
    Database: 'database'
} as const;
export type DatabaseObjectEnum = typeof DatabaseObjectEnum[keyof typeof DatabaseObjectEnum];


/**
 * Check if a given object implements the Database interface.
 */
export function instanceOfDatabase(value: object): value is Database {
    return true;
}

export function DatabaseFromJSON(json: any): Database {
    return DatabaseFromJSONTyped(json, false);
}

export function DatabaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Database {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'] == null ? undefined : json['object'],
        'id': json['id'] == null ? undefined : json['id'],
        'created_time': json['created_time'] == null ? undefined : (new Date(json['created_time'])),
        'created_by': json['created_by'] == null ? undefined : UserFromJSON(json['created_by']),
        'last_edited_time': json['last_edited_time'] == null ? undefined : (new Date(json['last_edited_time'])),
        'last_edited_by': json['last_edited_by'] == null ? undefined : UserFromJSON(json['last_edited_by']),
        'title': json['title'] == null ? undefined : ((json['title'] as Array<any>).map(RichTextItemFromJSON)),
        'icon': json['icon'] == null ? undefined : IconFromJSON(json['icon']),
        'cover': json['cover'] == null ? undefined : CoverFromJSON(json['cover']),
        'properties': json['properties'] == null ? undefined : (mapValues(json['properties'], PropertySchemaFromJSON)),
        'parent': json['parent'] == null ? undefined : ParentFromJSON(json['parent']),
        'url': json['url'] == null ? undefined : json['url'],
        'archived': json['archived'] == null ? undefined : json['archived'],
        'is_inline': json['is_inline'] == null ? undefined : json['is_inline'],
    };
}

export function DatabaseToJSON(json: any): Database {
    return DatabaseToJSONTyped(json, false);
}

export function DatabaseToJSONTyped(value?: Database | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'id': value['id'],
        'created_time': value['created_time'] == null ? undefined : ((value['created_time']).toISOString()),
        'created_by': UserToJSON(value['created_by']),
        'last_edited_time': value['last_edited_time'] == null ? undefined : ((value['last_edited_time']).toISOString()),
        'last_edited_by': UserToJSON(value['last_edited_by']),
        'title': value['title'] == null ? undefined : ((value['title'] as Array<any>).map(RichTextItemToJSON)),
        'icon': IconToJSON(value['icon']),
        'cover': CoverToJSON(value['cover']),
        'properties': value['properties'] == null ? undefined : (mapValues(value['properties'], PropertySchemaToJSON)),
        'parent': ParentToJSON(value['parent']),
        'url': value['url'],
        'archived': value['archived'],
        'is_inline': value['is_inline'],
    };
}

