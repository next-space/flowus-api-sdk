/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RichTextItemAnnotations } from './RichTextItemAnnotations';
import {
    RichTextItemAnnotationsFromJSON,
    RichTextItemAnnotationsFromJSONTyped,
    RichTextItemAnnotationsToJSON,
    RichTextItemAnnotationsToJSONTyped,
} from './RichTextItemAnnotations';
import type { RichTextItemEquation } from './RichTextItemEquation';
import {
    RichTextItemEquationFromJSON,
    RichTextItemEquationFromJSONTyped,
    RichTextItemEquationToJSON,
    RichTextItemEquationToJSONTyped,
} from './RichTextItemEquation';
import type { RichTextItemText } from './RichTextItemText';
import {
    RichTextItemTextFromJSON,
    RichTextItemTextFromJSONTyped,
    RichTextItemTextToJSON,
    RichTextItemTextToJSONTyped,
} from './RichTextItemText';
import type { RichTextItemMention } from './RichTextItemMention';
import {
    RichTextItemMentionFromJSON,
    RichTextItemMentionFromJSONTyped,
    RichTextItemMentionToJSON,
    RichTextItemMentionToJSONTyped,
} from './RichTextItemMention';

/**
 * 
 * @export
 * @interface RichTextItem
 */
export interface RichTextItem {
    /**
     * 
     * @type {string}
     * @memberof RichTextItem
     */
    type?: RichTextItemTypeEnum;
    /**
     * 
     * @type {RichTextItemText}
     * @memberof RichTextItem
     */
    text?: RichTextItemText;
    /**
     * 
     * @type {RichTextItemMention}
     * @memberof RichTextItem
     */
    mention?: RichTextItemMention;
    /**
     * 
     * @type {RichTextItemEquation}
     * @memberof RichTextItem
     */
    equation?: RichTextItemEquation;
    /**
     * 
     * @type {RichTextItemAnnotations}
     * @memberof RichTextItem
     */
    annotations?: RichTextItemAnnotations;
    /**
     * 
     * @type {string}
     * @memberof RichTextItem
     */
    plain_text?: string;
    /**
     * 
     * @type {string}
     * @memberof RichTextItem
     */
    href?: string;
}


/**
 * @export
 */
export const RichTextItemTypeEnum = {
    Text: 'text',
    Mention: 'mention',
    Equation: 'equation'
} as const;
export type RichTextItemTypeEnum = typeof RichTextItemTypeEnum[keyof typeof RichTextItemTypeEnum];


/**
 * Check if a given object implements the RichTextItem interface.
 */
export function instanceOfRichTextItem(value: object): value is RichTextItem {
    return true;
}

export function RichTextItemFromJSON(json: any): RichTextItem {
    return RichTextItemFromJSONTyped(json, false);
}

export function RichTextItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): RichTextItem {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'text': json['text'] == null ? undefined : RichTextItemTextFromJSON(json['text']),
        'mention': json['mention'] == null ? undefined : RichTextItemMentionFromJSON(json['mention']),
        'equation': json['equation'] == null ? undefined : RichTextItemEquationFromJSON(json['equation']),
        'annotations': json['annotations'] == null ? undefined : RichTextItemAnnotationsFromJSON(json['annotations']),
        'plain_text': json['plain_text'] == null ? undefined : json['plain_text'],
        'href': json['href'] == null ? undefined : json['href'],
    };
}

export function RichTextItemToJSON(json: any): RichTextItem {
    return RichTextItemToJSONTyped(json, false);
}

export function RichTextItemToJSONTyped(value?: RichTextItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'text': RichTextItemTextToJSON(value['text']),
        'mention': RichTextItemMentionToJSON(value['mention']),
        'equation': RichTextItemEquationToJSON(value['equation']),
        'annotations': RichTextItemAnnotationsToJSON(value['annotations']),
        'plain_text': value['plain_text'],
        'href': value['href'],
    };
}

