/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Parent } from './Parent';
import {
    ParentFromJSON,
    ParentFromJSONTyped,
    ParentToJSON,
    ParentToJSONTyped,
} from './Parent';
import type { BlockData } from './BlockData';
import {
    BlockDataFromJSON,
    BlockDataFromJSONTyped,
    BlockDataToJSON,
    BlockDataToJSONTyped,
} from './BlockData';

/**
 * 
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    object?: BlockObjectEnum;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    id?: string;
    /**
     * 
     * @type {Parent}
     * @memberof Block
     */
    parent?: Parent;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    type?: BlockTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof Block
     */
    created_time?: Date;
    /**
     * 
     * @type {User}
     * @memberof Block
     */
    created_by?: User;
    /**
     * 
     * @type {Date}
     * @memberof Block
     */
    last_edited_time?: Date;
    /**
     * 
     * @type {User}
     * @memberof Block
     */
    last_edited_by?: User;
    /**
     * 
     * @type {boolean}
     * @memberof Block
     */
    archived?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Block
     */
    has_children?: boolean;
    /**
     * 
     * @type {BlockData}
     * @memberof Block
     */
    data?: BlockData;
}


/**
 * @export
 */
export const BlockObjectEnum = {
    Block: 'block'
} as const;
export type BlockObjectEnum = typeof BlockObjectEnum[keyof typeof BlockObjectEnum];

/**
 * @export
 */
export const BlockTypeEnum = {
    Paragraph: 'paragraph',
    Heading1: 'heading_1',
    Heading2: 'heading_2',
    Heading3: 'heading_3',
    BulletedListItem: 'bulleted_list_item',
    NumberedListItem: 'numbered_list_item',
    ToDo: 'to_do',
    Quote: 'quote',
    Toggle: 'toggle',
    Code: 'code',
    Image: 'image',
    File: 'file',
    Bookmark: 'bookmark',
    Embed: 'embed',
    Callout: 'callout',
    Equation: 'equation',
    LinkToPage: 'link_to_page',
    Template: 'template',
    SyncedBlock: 'synced_block',
    Divider: 'divider',
    ColumnList: 'column_list',
    Column: 'column',
    Table: 'table',
    TableRow: 'table_row',
    ChildPage: 'child_page',
    ChildDatabase: 'child_database'
} as const;
export type BlockTypeEnum = typeof BlockTypeEnum[keyof typeof BlockTypeEnum];


/**
 * Check if a given object implements the Block interface.
 */
export function instanceOfBlock(value: object): value is Block {
    return true;
}

export function BlockFromJSON(json: any): Block {
    return BlockFromJSONTyped(json, false);
}

export function BlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Block {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'] == null ? undefined : json['object'],
        'id': json['id'] == null ? undefined : json['id'],
        'parent': json['parent'] == null ? undefined : ParentFromJSON(json['parent']),
        'type': json['type'] == null ? undefined : json['type'],
        'created_time': json['created_time'] == null ? undefined : (new Date(json['created_time'])),
        'created_by': json['created_by'] == null ? undefined : UserFromJSON(json['created_by']),
        'last_edited_time': json['last_edited_time'] == null ? undefined : (new Date(json['last_edited_time'])),
        'last_edited_by': json['last_edited_by'] == null ? undefined : UserFromJSON(json['last_edited_by']),
        'archived': json['archived'] == null ? undefined : json['archived'],
        'has_children': json['has_children'] == null ? undefined : json['has_children'],
        'data': json['data'] == null ? undefined : BlockDataFromJSON(json['data']),
    };
}

export function BlockToJSON(json: any): Block {
    return BlockToJSONTyped(json, false);
}

export function BlockToJSONTyped(value?: Block | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'id': value['id'],
        'parent': ParentToJSON(value['parent']),
        'type': value['type'],
        'created_time': value['created_time'] == null ? undefined : ((value['created_time']).toISOString()),
        'created_by': UserToJSON(value['created_by']),
        'last_edited_time': value['last_edited_time'] == null ? undefined : ((value['last_edited_time']).toISOString()),
        'last_edited_by': UserToJSON(value['last_edited_by']),
        'archived': value['archived'],
        'has_children': value['has_children'],
        'data': BlockDataToJSON(value['data']),
    };
}

