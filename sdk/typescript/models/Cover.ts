/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoverExternal } from './CoverExternal';
import {
    CoverExternalFromJSON,
    CoverExternalFromJSONTyped,
    CoverExternalToJSON,
    CoverExternalToJSONTyped,
} from './CoverExternal';

/**
 * 
 * @export
 * @interface Cover
 */
export interface Cover {
    /**
     * 
     * @type {string}
     * @memberof Cover
     */
    type?: CoverTypeEnum;
    /**
     * 
     * @type {CoverExternal}
     * @memberof Cover
     */
    external?: CoverExternal;
}


/**
 * @export
 */
export const CoverTypeEnum = {
    External: 'external'
} as const;
export type CoverTypeEnum = typeof CoverTypeEnum[keyof typeof CoverTypeEnum];


/**
 * Check if a given object implements the Cover interface.
 */
export function instanceOfCover(value: object): value is Cover {
    return true;
}

export function CoverFromJSON(json: any): Cover {
    return CoverFromJSONTyped(json, false);
}

export function CoverFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cover {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'external': json['external'] == null ? undefined : CoverExternalFromJSON(json['external']),
    };
}

export function CoverToJSON(json: any): Cover {
    return CoverToJSONTyped(json, false);
}

export function CoverToJSONTyped(value?: Cover | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'external': CoverExternalToJSON(value['external']),
    };
}

