/* tslint:disable */
/* eslint-disable */
/**
 * FlowUs API
 * FlowUs Developer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppendBlockChildrenRequest,
  AppendBlockChildrenResponse,
  Block,
  CreateDatabaseRequest,
  CreatePageRequest,
  CreatePageResponse,
  Database,
  DeleteBlockResponse,
  GetBlockChildrenResponse,
  Page,
  QueryDatabaseRequest,
  QueryDatabaseResponse,
  SearchRequest,
  SearchResult,
  UpdateBlockRequest,
  UpdateDatabaseRequest,
  UpdatePageRequest,
} from '../models/index';
import {
    AppendBlockChildrenRequestFromJSON,
    AppendBlockChildrenRequestToJSON,
    AppendBlockChildrenResponseFromJSON,
    AppendBlockChildrenResponseToJSON,
    BlockFromJSON,
    BlockToJSON,
    CreateDatabaseRequestFromJSON,
    CreateDatabaseRequestToJSON,
    CreatePageRequestFromJSON,
    CreatePageRequestToJSON,
    CreatePageResponseFromJSON,
    CreatePageResponseToJSON,
    DatabaseFromJSON,
    DatabaseToJSON,
    DeleteBlockResponseFromJSON,
    DeleteBlockResponseToJSON,
    GetBlockChildrenResponseFromJSON,
    GetBlockChildrenResponseToJSON,
    PageFromJSON,
    PageToJSON,
    QueryDatabaseRequestFromJSON,
    QueryDatabaseRequestToJSON,
    QueryDatabaseResponseFromJSON,
    QueryDatabaseResponseToJSON,
    SearchRequestFromJSON,
    SearchRequestToJSON,
    SearchResultFromJSON,
    SearchResultToJSON,
    UpdateBlockRequestFromJSON,
    UpdateBlockRequestToJSON,
    UpdateDatabaseRequestFromJSON,
    UpdateDatabaseRequestToJSON,
    UpdatePageRequestFromJSON,
    UpdatePageRequestToJSON,
} from '../models/index';

export interface AppendBlockChildrenOperationRequest {
    blockId: string;
    appendBlockChildrenRequest: AppendBlockChildrenRequest;
}

export interface CreateDatabaseOperationRequest {
    createDatabaseRequest: CreateDatabaseRequest;
}

export interface CreatePageOperationRequest {
    createPageRequest: CreatePageRequest;
}

export interface DeleteBlockRequest {
    blockId: string;
}

export interface GetBlockRequest {
    blockId: string;
}

export interface GetBlockChildrenRequest {
    blockId: string;
    startCursor?: string;
    pageSize?: number;
}

export interface GetDatabaseRequest {
    databaseId: string;
}

export interface GetPageRequest {
    pageId: string;
}

export interface QueryDatabaseOperationRequest {
    databaseId: string;
    queryDatabaseRequest?: QueryDatabaseRequest;
}

export interface SearchPagesRequest {
    searchRequest: SearchRequest;
}

export interface UpdateBlockOperationRequest {
    blockId: string;
    updateBlockRequest: UpdateBlockRequest;
}

export interface UpdateDatabaseOperationRequest {
    databaseId: string;
    updateDatabaseRequest: UpdateDatabaseRequest;
}

export interface UpdatePageOperationRequest {
    pageId: string;
    updatePageRequest: UpdatePageRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 向指定块追加一个或多个子块
     * 追加子块
     */
    async appendBlockChildrenRaw(requestParameters: AppendBlockChildrenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppendBlockChildrenResponse>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling appendBlockChildren().'
            );
        }

        if (requestParameters['appendBlockChildrenRequest'] == null) {
            throw new runtime.RequiredError(
                'appendBlockChildrenRequest',
                'Required parameter "appendBlockChildrenRequest" was null or undefined when calling appendBlockChildren().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/blocks/{block_id}/children`;
        urlPath = urlPath.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppendBlockChildrenRequestToJSON(requestParameters['appendBlockChildrenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppendBlockChildrenResponseFromJSON(jsonValue));
    }

    /**
     * 向指定块追加一个或多个子块
     * 追加子块
     */
    async appendBlockChildren(requestParameters: AppendBlockChildrenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppendBlockChildrenResponse> {
        const response = await this.appendBlockChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 在现有页面下创建一个新的数据库
     * 创建数据库
     */
    async createDatabaseRaw(requestParameters: CreateDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Database>> {
        if (requestParameters['createDatabaseRequest'] == null) {
            throw new runtime.RequiredError(
                'createDatabaseRequest',
                'Required parameter "createDatabaseRequest" was null or undefined when calling createDatabase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/databases`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDatabaseRequestToJSON(requestParameters['createDatabaseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatabaseFromJSON(jsonValue));
    }

    /**
     * 在现有页面下创建一个新的数据库
     * 创建数据库
     */
    async createDatabase(requestParameters: CreateDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Database> {
        const response = await this.createDatabaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 在页面或数据库中创建新页面
     * 创建页面
     */
    async createPageRaw(requestParameters: CreatePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePageResponse>> {
        if (requestParameters['createPageRequest'] == null) {
            throw new runtime.RequiredError(
                'createPageRequest',
                'Required parameter "createPageRequest" was null or undefined when calling createPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/pages`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePageRequestToJSON(requestParameters['createPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePageResponseFromJSON(jsonValue));
    }

    /**
     * 在页面或数据库中创建新页面
     * 创建页面
     */
    async createPage(requestParameters: CreatePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePageResponse> {
        const response = await this.createPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除指定块及其所有子块
     * 删除块
     */
    async deleteBlockRaw(requestParameters: DeleteBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteBlockResponse>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling deleteBlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/blocks/{block_id}`;
        urlPath = urlPath.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteBlockResponseFromJSON(jsonValue));
    }

    /**
     * 删除指定块及其所有子块
     * 删除块
     */
    async deleteBlock(requestParameters: DeleteBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteBlockResponse> {
        const response = await this.deleteBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID获取块对象
     * 获取块
     */
    async getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling getBlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/blocks/{block_id}`;
        urlPath = urlPath.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * 根据ID获取块对象
     * 获取块
     */
    async getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.getBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定块的子块列表
     * 获取子块
     */
    async getBlockChildrenRaw(requestParameters: GetBlockChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockChildrenResponse>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling getBlockChildren().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startCursor'] != null) {
            queryParameters['start_cursor'] = requestParameters['startCursor'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/blocks/{block_id}/children`;
        urlPath = urlPath.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockChildrenResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定块的子块列表
     * 获取子块
     */
    async getBlockChildren(requestParameters: GetBlockChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockChildrenResponse> {
        const response = await this.getBlockChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID获取数据库对象
     * 获取数据库
     */
    async getDatabaseRaw(requestParameters: GetDatabaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Database>> {
        if (requestParameters['databaseId'] == null) {
            throw new runtime.RequiredError(
                'databaseId',
                'Required parameter "databaseId" was null or undefined when calling getDatabase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/databases/{database_id}`;
        urlPath = urlPath.replace(`{${"database_id"}}`, encodeURIComponent(String(requestParameters['databaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatabaseFromJSON(jsonValue));
    }

    /**
     * 根据ID获取数据库对象
     * 获取数据库
     */
    async getDatabase(requestParameters: GetDatabaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Database> {
        const response = await this.getDatabaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID获取页面对象
     * 获取页面
     */
    async getPageRaw(requestParameters: GetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling getPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/pages/{page_id}`;
        urlPath = urlPath.replace(`{${"page_id"}}`, encodeURIComponent(String(requestParameters['pageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * 根据ID获取页面对象
     * 获取页面
     */
    async getPage(requestParameters: GetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.getPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取数据库中的页面列表，支持分页
     * 查询数据库
     */
    async queryDatabaseRaw(requestParameters: QueryDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryDatabaseResponse>> {
        if (requestParameters['databaseId'] == null) {
            throw new runtime.RequiredError(
                'databaseId',
                'Required parameter "databaseId" was null or undefined when calling queryDatabase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/databases/{database_id}/query`;
        urlPath = urlPath.replace(`{${"database_id"}}`, encodeURIComponent(String(requestParameters['databaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryDatabaseRequestToJSON(requestParameters['queryDatabaseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryDatabaseResponseFromJSON(jsonValue));
    }

    /**
     * 获取数据库中的页面列表，支持分页
     * 查询数据库
     */
    async queryDatabase(requestParameters: QueryDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryDatabaseResponse> {
        const response = await this.queryDatabaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通过向量搜索在空间中查找相关页面和内容
     * 搜索页面
     */
    async searchPagesRaw(requestParameters: SearchPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResult>> {
        if (requestParameters['searchRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRequest',
                'Required parameter "searchRequest" was null or undefined when calling searchPages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/pages/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestToJSON(requestParameters['searchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultFromJSON(jsonValue));
    }

    /**
     * 通过向量搜索在空间中查找相关页面和内容
     * 搜索页面
     */
    async searchPages(requestParameters: SearchPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResult> {
        const response = await this.searchPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新指定块的内容或属性
     * 更新块
     */
    async updateBlockRaw(requestParameters: UpdateBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling updateBlock().'
            );
        }

        if (requestParameters['updateBlockRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBlockRequest',
                'Required parameter "updateBlockRequest" was null or undefined when calling updateBlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/blocks/{block_id}`;
        urlPath = urlPath.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBlockRequestToJSON(requestParameters['updateBlockRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * 更新指定块的内容或属性
     * 更新块
     */
    async updateBlock(requestParameters: UpdateBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.updateBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新数据库的属性
     * 更新数据库
     */
    async updateDatabaseRaw(requestParameters: UpdateDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Database>> {
        if (requestParameters['databaseId'] == null) {
            throw new runtime.RequiredError(
                'databaseId',
                'Required parameter "databaseId" was null or undefined when calling updateDatabase().'
            );
        }

        if (requestParameters['updateDatabaseRequest'] == null) {
            throw new runtime.RequiredError(
                'updateDatabaseRequest',
                'Required parameter "updateDatabaseRequest" was null or undefined when calling updateDatabase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/databases/{database_id}`;
        urlPath = urlPath.replace(`{${"database_id"}}`, encodeURIComponent(String(requestParameters['databaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDatabaseRequestToJSON(requestParameters['updateDatabaseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatabaseFromJSON(jsonValue));
    }

    /**
     * 更新数据库的属性
     * 更新数据库
     */
    async updateDatabase(requestParameters: UpdateDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Database> {
        const response = await this.updateDatabaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新页面的属性
     * 更新页面属性
     */
    async updatePageRaw(requestParameters: UpdatePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling updatePage().'
            );
        }

        if (requestParameters['updatePageRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePageRequest',
                'Required parameter "updatePageRequest" was null or undefined when calling updatePage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/pages/{page_id}`;
        urlPath = urlPath.replace(`{${"page_id"}}`, encodeURIComponent(String(requestParameters['pageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageRequestToJSON(requestParameters['updatePageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * 更新页面的属性
     * 更新页面属性
     */
    async updatePage(requestParameters: UpdatePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.updatePageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
